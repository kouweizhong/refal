
/*-------------------------------------------------------------------------*/
/*	Trying to create LL(1) parser for Refal ;)                              */
/*	Y [11-06-06]                                                            */
/*-------------------------------------------------------------------------*/

using System.Collections;
using System.CodeDom;

COMPILER Refal

/*-------------------------------------------------------------------------*/
/*	LL(1) conflict resolvers                                                */
/*-------------------------------------------------------------------------*/

	static bool IsPattern()
	{
		Scanner.ResetPeek();
		Token tok = Scanner.Peek();
		return la.kind == _Semicolon && tok.kind != _RBrace;
	}

/*-------------------------------------------------------------------------*/
/* scanner and parser                                                      */
/*-------------------------------------------------------------------------*/

CHARACTERS
	
	Letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
	Digit      = "0123456789".
	Cr         = '\r'.
	Lf         = '\n'.
	Tab        = '\t'.
	Space      = ' '.
	StringChar = ANY - '"' - '\\'.
	CharChar   = ANY - '\'' - '\\' - Cr - Lf.
	Printable  = '\u0020' .. '\u007e'.
	HexDigit   = "0123456789abcdefABCDEF".

TOKENS
	
	Identifier = ['@'] Letter { Letter | Digit | "-" }.
	String     = '"' { StringChar | '\\' Printable { HexDigit } } '"'.
	Character  = '\'' { CharChar | '\\' Printable { HexDigit } } '\''.
	
	Integer    = ( Digit { Digit } | ("0x" | "0X") HexDigit { HexDigit } )
		[ ( "U" | "u" [ "L" | "l" ] ) | ("L" | "l" [ "U" | "u" ] ) ] .
	
	Real      =
		"." Digit { Digit }
		[ ( "E" | "e" ) [ "+" | "-" ] Digit { Digit } ]
		[ "F" | "f" | "D" | "d" | "M" | "m" ]
		| Digit { Digit }
		  ( "." Digit { Digit }
		    [ ( "E" | "e" ) [ "+" | "-" ] Digit { Digit } ]
		    [ "F" | "f" | "D" | "d" | "M" | "m" ]
		  | ( "E" | "e" ) [ "+" | "-" ] Digit { Digit }
		    [ "F" | "f" | "D" | "d" | "M" | "m" ]
		  | "F" | "f" | "D" | "d" | "M" | "m" ) .
		
	Equal = "=" .

	Bool       = "bool" .
	Char       = "char" .
	Float      = "float" .
	Int        = "int" .
	Null       = "null" .
	Object     = "object" .
	Str        = "str" .
	True       = "True" .
	False      = "False" .
	Else       = "else" .
	EntryPoint = "$ENTRY" .
	External   = "$EXTRN" .
	Semicolon  = ";" .
	LBracket   = "[" .
	LParen     = "(" .
	LBrace     = "{" .
	LCorner    = "<" .
	RBracket   = "]" .
	RParen     = ")" .
	RBrace     = "}" .
	RCorner    = ">" .

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "*" TO Cr 
COMMENTS FROM "*" TO Lf

IGNORE Cr + Lf + Tab

PRODUCTIONS

/*-------------------------------------------------------------------------*/

Refal = Function { Function } .

Function = NormalFunction | ExternalFunction .

ExternalFunction =
	External Identifier { "," Identifier } ";" .

NormalFunction =
	[ EntryPoint ] Identifier
	Block [ ";" ] .

Block =	
	"{"
		Pattern { IF (IsPattern()) ";" Pattern } [ ";" ]
	"}" .

Pattern =
	LExpression
	( "=" RExpression
	| WhereOrWithClause
	) .

LExpression =
	{ Element | Literal | "(" LExpression ")" } .

WhereOrWithClause =
	( "," | "&" ) Call ":"
	( Block
	| LExpression "=" RExpression
	) .

RExpression = { Call | Element | Literal | "(" RExpression ")" } .

Element = ( "e." | "s." | "t." ) ( Integer | Identifier ) .

Literal = String | Character | Integer | True | False | Identifier .

Call = "<" Identifier RExpression ">" .

/*-------------------------------------------------------------------------*/

END Refal.
