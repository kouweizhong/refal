This section should be empty: 
---------------------------------------- 
-- line 8 col 2: No entry point defined


using System;
using System.Collections;

namespace Refal.Runtime
{
	public class Program : RefalBase
	{
		static void Main()
		{
			Go(new PassiveExpression());
		}

		public static PassiveExpression Go(PassiveExpression expression)
		{
			Pattern pattern1 = new Pattern();
			if (RefalBase.Match(expression, pattern1))
			{
				return PassiveExpression.Build(Prout(PassiveExpression.Build("Hello".ToCharArray())));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

	}
}


using System;
using System.Collections;

namespace Refal.Runtime
{
	public class Program : RefalBase
	{
		static void Main()
		{
			Go(new PassiveExpression());
		}

		public static PassiveExpression Go(PassiveExpression expression)
		{
			Pattern pattern1 = new Pattern();
			if (RefalBase.Match(expression, pattern1))
			{
				return PassiveExpression.Build(Prout(PassiveExpression.Build(Pal(PassiveExpression.Build("sator arepo tenet opera rotas".ToCharArray())))));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Pal(PassiveExpression expression)
		{
			Pattern pattern2 = new Pattern();
			if (RefalBase.Match(expression, pattern2))
			{
				return PassiveExpression.Build(true);
			};

			Pattern pattern3 = new Pattern(new SymbolVariable("s.1"));
			if (RefalBase.Match(expression, pattern3))
			{
				return PassiveExpression.Build(true);
			};

			Pattern pattern4 = new Pattern(new SymbolVariable("s.1"), new ExpressionVariable("e.2"), new SymbolVariable("s.1"));
			if (RefalBase.Match(expression, pattern4))
			{
				return PassiveExpression.Build(Pal(PassiveExpression.Build(pattern4.GetVariable("e.2"))));
			};

			Pattern pattern5 = new Pattern(new ExpressionVariable("e.1"));
			if (RefalBase.Match(expression, pattern5))
			{
				return PassiveExpression.Build(false);
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

	}
}


using System;
using System.Collections;

namespace Refal.Runtime
{
	public class Program : RefalBase
	{
		static void Main()
		{
			Go(new PassiveExpression());
		}

		public static PassiveExpression Go(PassiveExpression expression)
		{
			Pattern pattern1 = new Pattern();
			if (RefalBase.Match(expression, pattern1))
			{
				return PassiveExpression.Build(Prout(PassiveExpression.Build(Chpm(PassiveExpression.Build("++312a=-3+=-".ToCharArray())))));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Chpm(PassiveExpression expression)
		{
			Pattern pattern2 = new Pattern("+".ToCharArray(), new ExpressionVariable("e.1"));
			if (RefalBase.Match(expression, pattern2))
			{
				return PassiveExpression.Build("-".ToCharArray(), Chpm(PassiveExpression.Build(pattern2.GetVariable("e.1"))));
			};

			Pattern pattern3 = new Pattern(new SymbolVariable("s.1"), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern3))
			{
				return PassiveExpression.Build(pattern3.GetVariable("s.1"), Chpm(PassiveExpression.Build(pattern3.GetVariable("e.2"))));
			};

			Pattern pattern4 = new Pattern();
			if (RefalBase.Match(expression, pattern4))
			{
				return PassiveExpression.Build();
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

	}
}


using System;
using System.Collections;

namespace Refal.Runtime
{
	public class Program : RefalBase
	{
		static void Main()
		{
			Go(new PassiveExpression());
		}

		public static PassiveExpression Go(PassiveExpression expression)
		{
			Pattern pattern1 = new Pattern();
			if (RefalBase.Match(expression, pattern1))
			{
				return PassiveExpression.Build(Prout(PassiveExpression.Build(Chpm(PassiveExpression.Build("++312a=-3+=-".ToCharArray())))));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Chpm(PassiveExpression expression)
		{
			Pattern pattern2 = new Pattern(new ExpressionVariable("e.1"), "+".ToCharArray(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern2))
			{
				return PassiveExpression.Build(pattern2.GetVariable("e.1"), "-".ToCharArray(), Chpm(PassiveExpression.Build(pattern2.GetVariable("e.2"))));
			};

			Pattern pattern3 = new Pattern(new ExpressionVariable("e.1"));
			if (RefalBase.Match(expression, pattern3))
			{
				return PassiveExpression.Build(pattern3.GetVariable("e.1"));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

	}
}


using System;
using System.Collections;

namespace Refal.Runtime
{
	public class Program : RefalBase
	{
		static void Main()
		{
			Go(new PassiveExpression());
		}

		public static PassiveExpression Go(PassiveExpression expression)
		{
			Pattern pattern1 = new Pattern();
			if (RefalBase.Match(expression, pattern1))
			{
				return PassiveExpression.Build(Prout(PassiveExpression.Build("0 + 0 = ", RAdd(PassiveExpression.Build(new OpeningBrace(), "0".ToCharArray(), new ClosingBrace(), new OpeningBrace(), "0".ToCharArray(), new ClosingBrace())))), Prout(PassiveExpression.Build("0' + 0 = ", RAdd(PassiveExpression.Build(new OpeningBrace(), "0\'".ToCharArray(), new ClosingBrace(), new OpeningBrace(), "0".ToCharArray(), new ClosingBrace())))), Prout(PassiveExpression.Build("0 + 0' = ", RAdd(PassiveExpression.Build(new OpeningBrace(), "0".ToCharArray(), new ClosingBrace(), new OpeningBrace(), "0\'".ToCharArray(), new ClosingBrace())))), Prout(PassiveExpression.Build("0' + 0' = ", RAdd(PassiveExpression.Build(new OpeningBrace(), "0\'".ToCharArray(), new ClosingBrace(), new OpeningBrace(), "0\'".ToCharArray(), new ClosingBrace())))), Prout(PassiveExpression.Build("0'' + 0''' = ", RAdd(PassiveExpression.Build(new OpeningBrace(), "0\'\'".ToCharArray(), new ClosingBrace(), new OpeningBrace(), "0\'\'\'".ToCharArray(), new ClosingBrace())))));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression RAdd(PassiveExpression expression)
		{
			Pattern pattern2 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new OpeningBrace(), "0".ToCharArray(), new ClosingBrace());
			if (RefalBase.Match(expression, pattern2))
			{
				return PassiveExpression.Build(pattern2.GetVariable("e.1"));
			};

			Pattern pattern3 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new OpeningBrace(), new ExpressionVariable("e.2"), "\'".ToCharArray(), new ClosingBrace());
			if (RefalBase.Match(expression, pattern3))
			{
				return PassiveExpression.Build(RAdd(PassiveExpression.Build(new OpeningBrace(), pattern3.GetVariable("e.1"), new ClosingBrace(), new OpeningBrace(), pattern3.GetVariable("e.2"), new ClosingBrace())), "\'".ToCharArray());
			};

			Pattern pattern4 = new Pattern(new ExpressionVariable("e.1"));
			if (RefalBase.Match(expression, pattern4))
			{
				return PassiveExpression.Build();
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

	}
}


using System;
using System.Collections;

namespace Refal.Runtime
{
	public class Program : RefalBase
	{
		static void Main()
		{
			Go(new PassiveExpression());
		}

		public static PassiveExpression Go(PassiveExpression expression)
		{
			Pattern pattern1 = new Pattern();
			if (RefalBase.Match(expression, pattern1))
			{
				return PassiveExpression.Build(Prout(PassiveExpression.Build("0 + 0 =", AddB(PassiveExpression.Build(new OpeningBrace(), "0".ToCharArray(), new ClosingBrace(), new OpeningBrace(), "0".ToCharArray(), new ClosingBrace())))), Prout(PassiveExpression.Build("0 + 1 =", AddB(PassiveExpression.Build(new OpeningBrace(), "0".ToCharArray(), new ClosingBrace(), new OpeningBrace(), "1".ToCharArray(), new ClosingBrace())))), Prout(PassiveExpression.Build("1 + 0 =", AddB(PassiveExpression.Build(new OpeningBrace(), "1".ToCharArray(), new ClosingBrace(), new OpeningBrace(), "0".ToCharArray(), new ClosingBrace())))), Prout(PassiveExpression.Build("1 + 1 =", AddB(PassiveExpression.Build(new OpeningBrace(), "1".ToCharArray(), new ClosingBrace(), new OpeningBrace(), "1".ToCharArray(), new ClosingBrace())))), Prout(PassiveExpression.Build("10 + 01 =", AddB(PassiveExpression.Build(new OpeningBrace(), "10".ToCharArray(), new ClosingBrace(), new OpeningBrace(), "01".ToCharArray(), new ClosingBrace())))), Prout(PassiveExpression.Build("1011 + 0110 =", AddB(PassiveExpression.Build(new OpeningBrace(), "1011".ToCharArray(), new ClosingBrace(), new OpeningBrace(), "0110".ToCharArray(), new ClosingBrace())))), Prout(PassiveExpression.Build("101100001 + 10110101 =", AddB(PassiveExpression.Build(new OpeningBrace(), "101100001".ToCharArray(), new ClosingBrace(), new OpeningBrace(), "10110101".ToCharArray(), new ClosingBrace())))), Prout(PassiveExpression.Build("asdbn + ddd =", AddB(PassiveExpression.Build(new OpeningBrace(), "asdbn".ToCharArray(), new ClosingBrace(), new OpeningBrace(), "ddd".ToCharArray(), new ClosingBrace())))));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression AddB(PassiveExpression expression)
		{
			Pattern pattern2 = new Pattern(new OpeningBrace(), new ClosingBrace(), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern2))
			{
				return PassiveExpression.Build(pattern2.GetVariable("e.1"));
			};

			Pattern pattern3 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new OpeningBrace(), new ClosingBrace());
			if (RefalBase.Match(expression, pattern3))
			{
				return PassiveExpression.Build(pattern3.GetVariable("e.1"));
			};

			Pattern pattern4 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), "0".ToCharArray(), new ClosingBrace(), new OpeningBrace(), new ExpressionVariable("e.2"), new SymbolVariable("s.3"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern4))
			{
				return PassiveExpression.Build(AddB(PassiveExpression.Build(new OpeningBrace(), pattern4.GetVariable("e.1"), new ClosingBrace(), new OpeningBrace(), pattern4.GetVariable("e.2"), new ClosingBrace())), pattern4.GetVariable("s.3"));
			};

			Pattern pattern5 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new SymbolVariable("s.3"), new ClosingBrace(), new OpeningBrace(), new ExpressionVariable("e.2"), "0".ToCharArray(), new ClosingBrace());
			if (RefalBase.Match(expression, pattern5))
			{
				return PassiveExpression.Build(AddB(PassiveExpression.Build(new OpeningBrace(), pattern5.GetVariable("e.1"), new ClosingBrace(), new OpeningBrace(), pattern5.GetVariable("e.2"), new ClosingBrace())), pattern5.GetVariable("s.3"));
			};

			Pattern pattern6 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), "1".ToCharArray(), new ClosingBrace(), new OpeningBrace(), new ExpressionVariable("e.2"), "1".ToCharArray(), new ClosingBrace());
			if (RefalBase.Match(expression, pattern6))
			{
				return PassiveExpression.Build(AddB(PassiveExpression.Build(new OpeningBrace(), "1".ToCharArray(), new ClosingBrace(), new OpeningBrace(), AddB(PassiveExpression.Build(new OpeningBrace(), pattern6.GetVariable("e.1"), new ClosingBrace(), new OpeningBrace(), pattern6.GetVariable("e.2"), new ClosingBrace())), new ClosingBrace())), "0".ToCharArray());
			};

			Pattern pattern7 = new Pattern(new ExpressionVariable("e.1"));
			if (RefalBase.Match(expression, pattern7))
			{
				return PassiveExpression.Build("** error! **".ToCharArray());
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

	}
}


using System;
using System.Collections;

namespace Refal.Runtime
{
	public class Program : RefalBase
	{
		static void Main()
		{
			Go(new PassiveExpression());
		}

		public static PassiveExpression Go(PassiveExpression expression)
		{
			Pattern pattern1 = new Pattern();
			if (RefalBase.Match(expression, pattern1))
			{
				return PassiveExpression.Build(Output(PassiveExpression.Build()));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Output(PassiveExpression expression)
		{
			Pattern pattern2 = new Pattern();
			if (RefalBase.Match(expression, pattern2))
			{
				return PassiveExpression.Build(Output(PassiveExpression.Build(Card(PassiveExpression.Build()))));
			};

			Pattern pattern3 = new Pattern(0);
			if (RefalBase.Match(expression, pattern3))
			{
				return PassiveExpression.Build();
			};

			Pattern pattern4 = new Pattern(new ExpressionVariable("e.1"));
			if (RefalBase.Match(expression, pattern4))
			{
				return PassiveExpression.Build(Prout(PassiveExpression.Build(pattern4.GetVariable("e.1"))), Output(PassiveExpression.Build(Card(PassiveExpression.Build()))));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

	}
}


using System;
using System.Collections;

namespace Refal.Runtime
{
	public class Program : RefalBase
	{
		static void Main()
		{
			Go(new PassiveExpression());
		}

		public static PassiveExpression Go(PassiveExpression expression)
		{
			Pattern pattern1 = new Pattern();
			if (RefalBase.Match(expression, pattern1))
			{
				return PassiveExpression.Build(Open(PassiveExpression.Build("r".ToCharArray(), "File", "08_inout.ref")), Output(PassiveExpression.Build(new OpeningBrace(), new ClosingBrace(), new OpeningBrace(), "File", new ClosingBrace())));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Output(PassiveExpression expression)
		{
			Pattern pattern2 = new Pattern(new OpeningBrace(), new ClosingBrace(), new OpeningBrace(), new SymbolVariable("s.D"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern2))
			{
				return PassiveExpression.Build(Output(PassiveExpression.Build(new OpeningBrace(), Get(PassiveExpression.Build(pattern2.GetVariable("s.D"))), new ClosingBrace(), new OpeningBrace(), pattern2.GetVariable("s.D"), new ClosingBrace())));
			};

			Pattern pattern3 = new Pattern(new OpeningBrace(), 0, new ClosingBrace(), new OpeningBrace(), new SymbolVariable("s.D"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern3))
			{
				return PassiveExpression.Build();
			};

			Pattern pattern4 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new OpeningBrace(), new SymbolVariable("s.D"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern4))
			{
				return PassiveExpression.Build(Prout(PassiveExpression.Build(pattern4.GetVariable("e.1"))), Output(PassiveExpression.Build(new OpeningBrace(), Get(PassiveExpression.Build(pattern4.GetVariable("s.D"))), new ClosingBrace(), new OpeningBrace(), pattern4.GetVariable("s.D"), new ClosingBrace())));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

	}
}


using System;
using System.Collections;

namespace Refal.Runtime
{
	public class Program : RefalBase
	{
		static void Main()
		{
			Go(new PassiveExpression());
		}

		public static PassiveExpression Go(PassiveExpression expression)
		{
			Pattern pattern1 = new Pattern();
			if (RefalBase.Match(expression, pattern1))
			{
				return PassiveExpression.Build(Open(PassiveExpression.Build("r".ToCharArray(), InputFile(PassiveExpression.Build()), "08_inout.ref".ToCharArray())), Output(PassiveExpression.Build(new OpeningBrace(), new ClosingBrace(), new OpeningBrace(), InputFile(PassiveExpression.Build()), new ClosingBrace())));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression InputFile(PassiveExpression expression)
		{
			Pattern pattern2 = new Pattern();
			if (RefalBase.Match(expression, pattern2))
			{
				return PassiveExpression.Build(1);
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Output(PassiveExpression expression)
		{
			Pattern pattern3 = new Pattern(new OpeningBrace(), new ClosingBrace(), new OpeningBrace(), new SymbolVariable("s.D"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern3))
			{
				return PassiveExpression.Build(Output(PassiveExpression.Build(new OpeningBrace(), Get(PassiveExpression.Build(pattern3.GetVariable("s.D"))), new ClosingBrace(), new OpeningBrace(), pattern3.GetVariable("s.D"), new ClosingBrace())));
			};

			Pattern pattern4 = new Pattern(new OpeningBrace(), 0, new ClosingBrace(), new OpeningBrace(), new SymbolVariable("s.D"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern4))
			{
				return PassiveExpression.Build();
			};

			Pattern pattern5 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new OpeningBrace(), new SymbolVariable("s.D"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern5))
			{
				return PassiveExpression.Build(Prout(PassiveExpression.Build(pattern5.GetVariable("e.1"))), Output(PassiveExpression.Build(new OpeningBrace(), Get(PassiveExpression.Build(pattern5.GetVariable("s.D"))), new ClosingBrace(), new OpeningBrace(), pattern5.GetVariable("s.D"), new ClosingBrace())));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

	}
}


using System;
using System.Collections;

namespace Refal.Runtime
{
	public class Program : RefalBase
	{
		static void Main()
		{
			Go(new PassiveExpression());
		}

		public static PassiveExpression Go(PassiveExpression expression)
		{
			Pattern pattern1 = new Pattern();
			if (RefalBase.Match(expression, pattern1))
			{
				return PassiveExpression.Build(Open(PassiveExpression.Build("w".ToCharArray(), 1, "09_inout.ex2".ToCharArray())), Xxout(PassiveExpression.Build(1, Input(PassiveExpression.Build("09_inout.ex1".ToCharArray())))), Open(PassiveExpression.Build("r".ToCharArray(), 1, "09_inout.ex2".ToCharArray())), Prout(PassiveExpression.Build(Xxin(PassiveExpression.Build("09_inout.ex2".ToCharArray())))));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}







	}
}


using System;
using System.Collections;

namespace Refal.Runtime
{
	public class Program : RefalBase
	{
		static void Main()
		{
			Go(new PassiveExpression());
		}

		public static PassiveExpression Go(PassiveExpression expression)
		{
			Pattern pattern1 = new Pattern();
			if (RefalBase.Match(expression, pattern1))
			{
				return PassiveExpression.Build(Prout(PassiveExpression.Build(Xxin(PassiveExpression.Build("10_inout.ex".ToCharArray())))));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}



	}
}


using System;
using System.Collections;

namespace Refal.Runtime
{
	public class Program : RefalBase
	{
		static void Main()
		{
			Go(new PassiveExpression());
		}

		public static PassiveExpression Go(PassiveExpression expression)
		{
			Pattern pattern1 = new Pattern();
			if (RefalBase.Match(expression, pattern1))
			{
				return PassiveExpression.Build(Job(PassiveExpression.Build(Card(PassiveExpression.Build()))));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Job(PassiveExpression expression)
		{
			Pattern pattern2 = new Pattern(0);
			if (RefalBase.Match(expression, pattern2))
			{
				return PassiveExpression.Build();
			};

			Pattern pattern3 = new Pattern(new ExpressionVariable("e.X"));
			if (RefalBase.Match(expression, pattern3))
			{
				return PassiveExpression.Build(Prout(PassiveExpression.Build(Trans-line(PassiveExpression.Build(pattern3.GetVariable("e.X"))))), Job(PassiveExpression.Build(Card(PassiveExpression.Build()))));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Trans-line(PassiveExpression expression)
		{
			Pattern pattern4 = new Pattern(" ".ToCharArray(), new ExpressionVariable("e.X"));
			if (RefalBase.Match(expression, pattern4))
			{
				return PassiveExpression.Build(Trans-line(PassiveExpression.Build(pattern4.GetVariable("e.X"))));
			};

			Pattern pattern5 = new Pattern(new ExpressionVariable("e.Word"), " ".ToCharArray(), new ExpressionVariable("e.Rest"));
			if (RefalBase.Match(expression, pattern5))
			{
				return PassiveExpression.Build(Trans(PassiveExpression.Build(new OpeningBrace(), pattern5.GetVariable("e.Word"), new ClosingBrace(), Table(PassiveExpression.Build()))), " ".ToCharArray(), Trans-line(PassiveExpression.Build(pattern5.GetVariable("e.Rest"))));
			};

			Pattern pattern6 = new Pattern();
			if (RefalBase.Match(expression, pattern6))
			{
				return PassiveExpression.Build();
			};

			Pattern pattern7 = new Pattern(new ExpressionVariable("e.Word"));
			if (RefalBase.Match(expression, pattern7))
			{
				return PassiveExpression.Build(Trans(PassiveExpression.Build(new OpeningBrace(), pattern7.GetVariable("e.Word"), new ClosingBrace(), Table(PassiveExpression.Build()))), " ".ToCharArray());
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Table(PassiveExpression expression)
		{
			Pattern pattern8 = new Pattern();
			if (RefalBase.Match(expression, pattern8))
			{
				return PassiveExpression.Build(new OpeningBrace(), new OpeningBrace(), "cane".ToCharArray(), new ClosingBrace(), "dog".ToCharArray(), new ClosingBrace(), new OpeningBrace(), new OpeningBrace(), "gatto".ToCharArray(), new ClosingBrace(), "cat".ToCharArray(), new ClosingBrace(), new OpeningBrace(), new OpeningBrace(), "cavallo".ToCharArray(), new ClosingBrace(), "horse".ToCharArray(), new ClosingBrace(), new OpeningBrace(), new OpeningBrace(), "rana".ToCharArray(), new ClosingBrace(), "frog".ToCharArray(), new ClosingBrace(), new OpeningBrace(), new OpeningBrace(), "porco".ToCharArray(), new ClosingBrace(), "pig".ToCharArray(), new ClosingBrace());
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Trans(PassiveExpression expression)
		{
			Pattern pattern9 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.It"), new ClosingBrace(), new ExpressionVariable("e.1"), new OpeningBrace(), new OpeningBrace(), new ExpressionVariable("e.It"), new ClosingBrace(), new ExpressionVariable("e.Eng"), new ClosingBrace(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern9))
			{
				return PassiveExpression.Build(pattern9.GetVariable("e.Eng"));
			};

			Pattern pattern10 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.It"), new ClosingBrace(), new ExpressionVariable("e.1"));
			if (RefalBase.Match(expression, pattern10))
			{
				return PassiveExpression.Build("***".ToCharArray());
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

	}
}


using System;
using System.Collections;

namespace Refal.Runtime
{
	public class Program : RefalBase
	{
		static void Main()
		{
			Go(new PassiveExpression());
		}

		public static PassiveExpression Go(PassiveExpression expression)
		{
			Pattern pattern1 = new Pattern();
			if (RefalBase.Match(expression, pattern1))
			{
				return PassiveExpression.Build(Open(PassiveExpression.Build("r".ToCharArray(), 1, Arg(PassiveExpression.Build(1)))), Open(PassiveExpression.Build("w".ToCharArray(), 2, Arg(PassiveExpression.Build(2)))), Mbprep(PassiveExpression.Build(Next(PassiveExpression.Build()))));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Next(PassiveExpression expression)
		{
			Pattern pattern2 = new Pattern();
			if (RefalBase.Match(expression, pattern2))
			{
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Mbprep(PassiveExpression expression)
		{
			Pattern pattern3 = new Pattern(0);
			if (RefalBase.Match(expression, pattern3))
			{
				return PassiveExpression.Build();
			};

			Pattern pattern4 = new Pattern(new ExpressionVariable("e.1"));
			if (RefalBase.Match(expression, pattern4))
			{
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Lookm0(PassiveExpression expression)
		{
			Pattern pattern5 = new Pattern(new ExpressionVariable("e.1"), "[".ToCharArray(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern5))
			{
				return PassiveExpression.Build(Lookm(PassiveExpression.Build(new OpeningBrace(), new ClosingBrace(), pattern5.GetVariable("e.1"), "[".ToCharArray(), pattern5.GetVariable("e.2"))));
			};

			Pattern pattern6 = new Pattern(new ExpressionVariable("e.1"));
			if (RefalBase.Match(expression, pattern6))
			{
				return PassiveExpression.Build(pattern6.GetVariable("e.1"));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Lookm(PassiveExpression expression)
		{
			Pattern pattern7 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), "[".ToCharArray(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern7))
			{
				return PassiveExpression.Build(new OpeningBrace(), pattern7.GetVariable("e.1"), new ClosingBrace(), "[".ToCharArray(), pattern7.GetVariable("e.2"));
			};

			Pattern pattern8 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), "\"".ToCharArray(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern8))
			{
				return PassiveExpression.Build(Lookm(PassiveExpression.Build(new OpeningBrace(), pattern8.GetVariable("e.1"), pattern8.GetVariable("e.0"), new ClosingBrace(), pattern8.GetVariable("e.3"))));
			};

			Pattern pattern9 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), "\'".ToCharArray(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern9))
			{
				return PassiveExpression.Build(Lookm(PassiveExpression.Build(new OpeningBrace(), pattern9.GetVariable("e.1"), pattern9.GetVariable("e.0"), new ClosingBrace(), pattern9.GetVariable("e.3"))));
			};

			Pattern pattern10 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), "/*".ToCharArray(), new ExpressionVariable("e.2"), "*/".ToCharArray(), new ExpressionVariable("e.3"));
			if (RefalBase.Match(expression, pattern10))
			{
				return PassiveExpression.Build(Lookm(PassiveExpression.Build(new OpeningBrace(), pattern10.GetVariable("e.1"), "/*".ToCharArray(), pattern10.GetVariable("e.2"), "*/".ToCharArray(), new ClosingBrace(), pattern10.GetVariable("e.3"))));
			};

			Pattern pattern11 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new TermVariable("t.A"), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern11))
			{
				return PassiveExpression.Build(Lookm(PassiveExpression.Build(new OpeningBrace(), pattern11.GetVariable("e.1"), pattern11.GetVariable("t.A"), new ClosingBrace(), pattern11.GetVariable("e.2"))));
			};

			Pattern pattern12 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern12))
			{
				return PassiveExpression.Build(pattern12.GetVariable("e.1"));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Lookp(PassiveExpression expression)
		{
			Pattern pattern13 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.ML"), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), "[".ToCharArray(), new ExpressionVariable("e.2"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern13))
			{
				return PassiveExpression.Build(Lookp(PassiveExpression.Build(new OpeningBrace(), pattern13.GetVariable("e.ML"), new OpeningBrace(), pattern13.GetVariable("e.1"), new ClosingBrace(), new OpeningBrace(), "[".ToCharArray(), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), pattern13.GetVariable("e.2"), new ClosingBrace())));
			};

			Pattern pattern14 = new Pattern(new OpeningBrace(), new OpeningBrace(), "[".ToCharArray(), new ExpressionVariable("e.1"), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), "]".ToCharArray(), new ExpressionVariable("e.2"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern14))
			{
				return PassiveExpression.Build(Transl(PassiveExpression.Build(new OpeningBrace(), new OpeningBrace(), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), "[".ToCharArray(), pattern14.GetVariable("e.1"), "]".ToCharArray(), new ClosingBrace())), pattern14.GetVariable("e.2"));
			};

			Pattern pattern15 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.ML"), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new OpeningBrace(), "[".ToCharArray(), new ExpressionVariable("e.2"), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), "]".ToCharArray(), new ExpressionVariable("e.3"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern15))
			{
				return PassiveExpression.Build(Lookp(PassiveExpression.Build(new OpeningBrace(), pattern15.GetVariable("e.ML"), new OpeningBrace(), pattern15.GetVariable("e.1"), Transl(PassiveExpression.Build(new OpeningBrace(), new OpeningBrace(), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), "[".ToCharArray(), pattern15.GetVariable("e.2"), "]".ToCharArray(), new ClosingBrace())), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), pattern15.GetVariable("e.3"), new ClosingBrace())));
			};

			Pattern pattern16 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.L"), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), "\"".ToCharArray(), new ExpressionVariable("e.2"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern16))
			{
				return PassiveExpression.Build(Lookp(PassiveExpression.Build(new OpeningBrace(), pattern16.GetVariable("e.L"), new OpeningBrace(), pattern16.GetVariable("e.1"), new OpeningBrace(), pattern16.GetVariable("e.0"), new ClosingBrace(), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), pattern16.GetVariable("e.3"), new ClosingBrace())));
			};

			Pattern pattern17 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.L"), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), "\'".ToCharArray(), new ExpressionVariable("e.2"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern17))
			{
				return PassiveExpression.Build(Lookp(PassiveExpression.Build(new OpeningBrace(), pattern17.GetVariable("e.L"), new OpeningBrace(), pattern17.GetVariable("e.1"), new OpeningBrace(), pattern17.GetVariable("e.0"), new ClosingBrace(), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), pattern17.GetVariable("e.3"), new ClosingBrace())));
			};

			Pattern pattern18 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.L"), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), "/*".ToCharArray(), new ExpressionVariable("e.2"), "*/".ToCharArray(), new ExpressionVariable("e.3"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern18))
			{
				return PassiveExpression.Build(Lookp(PassiveExpression.Build(new OpeningBrace(), pattern18.GetVariable("e.L"), new OpeningBrace(), pattern18.GetVariable("e.1"), new OpeningBrace(), "/*".ToCharArray(), pattern18.GetVariable("e.2"), "*/".ToCharArray(), new ClosingBrace(), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), pattern18.GetVariable("e.3"), new ClosingBrace())));
			};

			Pattern pattern19 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.L"), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), 0, new ClosingBrace());
			if (RefalBase.Match(expression, pattern19))
			{
				return PassiveExpression.Build(Ermes(PassiveExpression.Build("ERROR: No pair for [".ToCharArray())));
			};

			Pattern pattern20 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.L"), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), new SymbolVariable("s.A"), new ExpressionVariable("e.2"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern20))
			{
				return PassiveExpression.Build(Lookp(PassiveExpression.Build(new OpeningBrace(), pattern20.GetVariable("e.L"), new OpeningBrace(), pattern20.GetVariable("e.1"), pattern20.GetVariable("s.A"), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), pattern20.GetVariable("e.2"), new ClosingBrace())));
			};

			Pattern pattern21 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.L"), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), new ClosingBrace());
			if (RefalBase.Match(expression, pattern21))
			{
				return PassiveExpression.Build(Lookp(PassiveExpression.Build(new OpeningBrace(), pattern21.GetVariable("e.L"), new OpeningBrace(), pattern21.GetVariable("e.1"), ".EOL.", new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), Next(PassiveExpression.Build()), new ClosingBrace())));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Quotes(PassiveExpression expression)
		{
			Pattern pattern22 = new Pattern(new SymbolVariable("s.Q"), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new ExpressionVariable("e.0"), "\\".ToCharArray(), "\\".ToCharArray(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern22))
			{
				return PassiveExpression.Build(Quotes(PassiveExpression.Build(pattern22.GetVariable("s.Q"), new OpeningBrace(), pattern22.GetVariable("e.1"), pattern22.GetVariable("e.0"), "\\".ToCharArray(), "\\".ToCharArray(), new ClosingBrace(), pattern22.GetVariable("e.2"))));
			};

			Pattern pattern23 = new Pattern(new SymbolVariable("s.Q"), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new ExpressionVariable("e.0"), "\\".ToCharArray(), new SymbolVariable("s.Q"), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern23))
			{
				return PassiveExpression.Build(Quotes(PassiveExpression.Build(pattern23.GetVariable("s.Q"), new OpeningBrace(), pattern23.GetVariable("e.1"), pattern23.GetVariable("e.0"), "\\".ToCharArray(), pattern23.GetVariable("s.Q"), new ClosingBrace(), pattern23.GetVariable("e.2"))));
			};

			Pattern pattern24 = new Pattern(new SymbolVariable("s.Q"), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new ExpressionVariable("e.0"), new SymbolVariable("s.Q"), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern24))
			{
				return PassiveExpression.Build(new OpeningBrace(), pattern24.GetVariable("s.Q"), pattern24.GetVariable("e.1"), pattern24.GetVariable("e.0"), pattern24.GetVariable("s.Q"), new ClosingBrace(), pattern24.GetVariable("e.2"));
			};

			Pattern pattern25 = new Pattern(new SymbolVariable("s.Q"), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern25))
			{
				return PassiveExpression.Build(new OpeningBrace(), pattern25.GetVariable("s.Q"), new ClosingBrace(), pattern25.GetVariable("e.1"), pattern25.GetVariable("e.2"));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Out(PassiveExpression expression)
		{
			Pattern pattern26 = new Pattern(new ExpressionVariable("e.1"), ".EOL.", new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern26))
			{
				return PassiveExpression.Build(Putz(PassiveExpression.Build(2, Elpar(PassiveExpression.Build(pattern26.GetVariable("e.1"))))), Out(PassiveExpression.Build(pattern26.GetVariable("e.2"))));
			};

			Pattern pattern27 = new Pattern(new ExpressionVariable("e.1"));
			if (RefalBase.Match(expression, pattern27))
			{
				return PassiveExpression.Build(Mbprep(PassiveExpression.Build(Elpar(PassiveExpression.Build(pattern27.GetVariable("e.1"))))));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Elpar(PassiveExpression expression)
		{
			Pattern pattern28 = new Pattern(new ExpressionVariable("e.1"), new OpeningBrace(), new ExpressionVariable("e.2"), new ClosingBrace(), new ExpressionVariable("e.3"));
			if (RefalBase.Match(expression, pattern28))
			{
				return PassiveExpression.Build(pattern28.GetVariable("e.1"), pattern28.GetVariable("e.2"), Elpar(PassiveExpression.Build(pattern28.GetVariable("e.3"))));
			};

			Pattern pattern29 = new Pattern(new ExpressionVariable("e.1"));
			if (RefalBase.Match(expression, pattern29))
			{
				return PassiveExpression.Build(pattern29.GetVariable("e.1"));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Transl(PassiveExpression expression)
		{
			Pattern pattern30 = new Pattern(new OpeningBrace(), new OpeningBrace(), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), "[.".ToCharArray(), new ExpressionVariable("e.1"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern30))
			{
				return PassiveExpression.Build(Transl(PassiveExpression.Build(new OpeningBrace(), new OpeningBrace(), "((".ToCharArray(), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), pattern30.GetVariable("e.1"), new ClosingBrace())));
			};

			Pattern pattern31 = new Pattern(new OpeningBrace(), new OpeningBrace(), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), "[".ToCharArray(), new ExpressionVariable("e.1"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern31))
			{
				return PassiveExpression.Build(Transl(PassiveExpression.Build(new OpeningBrace(), new OpeningBrace(), "(e.ML(".ToCharArray(), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), pattern31.GetVariable("e.1"), new ClosingBrace())));
			};

			Pattern pattern32 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.ML"), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), "(".ToCharArray(), new ExpressionVariable("e.2"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern32))
			{
				return PassiveExpression.Build(Transl(PassiveExpression.Build(new OpeningBrace(), pattern32.GetVariable("e.ML"), new OpeningBrace(), pattern32.GetVariable("e.1"), new ClosingBrace(), new OpeningBrace(), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), pattern32.GetVariable("e.2"), new ClosingBrace())));
			};

			Pattern pattern33 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.ML"), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new OpeningBrace(), new ExpressionVariable("e.2"), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), ")".ToCharArray(), new ExpressionVariable("e.3"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern33))
			{
				return PassiveExpression.Build(Transl(PassiveExpression.Build(new OpeningBrace(), pattern33.GetVariable("e.ML"), new OpeningBrace(), pattern33.GetVariable("e.1"), "(".ToCharArray(), pattern33.GetVariable("e.2"), ")".ToCharArray(), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), pattern33.GetVariable("e.3"), new ClosingBrace())));
			};

			Pattern pattern34 = new Pattern(new OpeningBrace(), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), ")".ToCharArray(), new ExpressionVariable("e.3"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern34))
			{
				return PassiveExpression.Build(Ermes(PassiveExpression.Build("ERROR: Unbalanced right parenth. before ^".ToCharArray())));
			};

			Pattern pattern35 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.ML"), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), "]".ToCharArray(), new ClosingBrace());
			if (RefalBase.Match(expression, pattern35))
			{
				return PassiveExpression.Build(Ermes(PassiveExpression.Build("ERROR: No pointer".ToCharArray())));
			};

			Pattern pattern36 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.ML"), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), "^".ToCharArray(), new ExpressionVariable("e.2"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern36))
			{
				return PassiveExpression.Build(Trlmb(PassiveExpression.Build(pattern36.GetVariable("e.ML"), new OpeningBrace(), pattern36.GetVariable("e.1"), new ClosingBrace())), "))(".ToCharArray(), Transla(PassiveExpression.Build(new OpeningBrace(), new OpeningBrace(), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), pattern36.GetVariable("e.2"), new ClosingBrace())));
			};

			Pattern pattern37 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.ML"), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), new TermVariable("t.A"), new ExpressionVariable("e.2"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern37))
			{
				return PassiveExpression.Build(Transl(PassiveExpression.Build(new OpeningBrace(), pattern37.GetVariable("e.ML"), new OpeningBrace(), pattern37.GetVariable("e.1"), pattern37.GetVariable("t.A"), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), pattern37.GetVariable("e.2"), new ClosingBrace())));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Transla(PassiveExpression expression)
		{
			Pattern pattern38 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.ML"), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), "(".ToCharArray(), new ExpressionVariable("e.2"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern38))
			{
				return PassiveExpression.Build(Transla(PassiveExpression.Build(new OpeningBrace(), pattern38.GetVariable("e.ML"), new OpeningBrace(), pattern38.GetVariable("e.1"), new ClosingBrace(), new OpeningBrace(), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), pattern38.GetVariable("e.2"), new ClosingBrace())));
			};

			Pattern pattern39 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.ML"), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new OpeningBrace(), new ExpressionVariable("e.2"), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), ")".ToCharArray(), new ExpressionVariable("e.3"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern39))
			{
				return PassiveExpression.Build(Transla(PassiveExpression.Build(new OpeningBrace(), pattern39.GetVariable("e.ML"), new OpeningBrace(), pattern39.GetVariable("e.1"), "(".ToCharArray(), pattern39.GetVariable("e.2"), ")".ToCharArray(), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), pattern39.GetVariable("e.3"), new ClosingBrace())));
			};

			Pattern pattern40 = new Pattern(new OpeningBrace(), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), ")".ToCharArray(), new ExpressionVariable("e.2"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern40))
			{
				return PassiveExpression.Build(Transla(PassiveExpression.Build(new OpeningBrace(), new OpeningBrace(), pattern40.GetVariable("e.1"), ")(".ToCharArray(), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), pattern40.GetVariable("e.2"), new ClosingBrace())));
			};

			Pattern pattern41 = new Pattern(new OpeningBrace(), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), ".]".ToCharArray(), new ClosingBrace());
			if (RefalBase.Match(expression, pattern41))
			{
				return PassiveExpression.Build(pattern41.GetVariable("e.1"), ")".ToCharArray());
			};

			Pattern pattern42 = new Pattern(new OpeningBrace(), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), "]".ToCharArray(), new ClosingBrace());
			if (RefalBase.Match(expression, pattern42))
			{
				return PassiveExpression.Build(pattern42.GetVariable("e.1"), ")e.MR".ToCharArray());
			};

			Pattern pattern43 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.ML"), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), "]".ToCharArray(), new ClosingBrace());
			if (RefalBase.Match(expression, pattern43))
			{
				return PassiveExpression.Build(Ermes(PassiveExpression.Build("ERROR: Unbalanced left parenth. after pointer".ToCharArray())));
			};

			Pattern pattern44 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.ML"), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), new TermVariable("t.A"), new ExpressionVariable("e.2"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern44))
			{
				return PassiveExpression.Build(Transla(PassiveExpression.Build(new OpeningBrace(), pattern44.GetVariable("e.ML"), new OpeningBrace(), pattern44.GetVariable("e.1"), pattern44.GetVariable("t.A"), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), pattern44.GetVariable("e.2"), new ClosingBrace())));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Trlmb(PassiveExpression expression)
		{
			Pattern pattern45 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new OpeningBrace(), new ExpressionVariable("e.2"), new ClosingBrace(), new ExpressionVariable("e.L"));
			if (RefalBase.Match(expression, pattern45))
			{
				return PassiveExpression.Build(pattern45.GetVariable("e.1"), ")(".ToCharArray(), Trlmb(PassiveExpression.Build(new OpeningBrace(), pattern45.GetVariable("e.2"), new ClosingBrace(), pattern45.GetVariable("e.L"))));
			};

			Pattern pattern46 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern46))
			{
				return PassiveExpression.Build(pattern46.GetVariable("e.1"));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Putz(PassiveExpression expression)
		{
			Pattern pattern47 = new Pattern(new SymbolVariable("s.C"), new ExpressionVariable("e.E"));
			if (RefalBase.Match(expression, pattern47))
			{
				return PassiveExpression.Build(Destroy(PassiveExpression.Build(Put(PassiveExpression.Build(pattern47.GetVariable("s.C"), pattern47.GetVariable("e.E"))))));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Destroy(PassiveExpression expression)
		{
			Pattern pattern48 = new Pattern(new ExpressionVariable("e.E"));
			if (RefalBase.Match(expression, pattern48))
			{
				return PassiveExpression.Build();
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Ermes(PassiveExpression expression)
		{
			Pattern pattern49 = new Pattern(new ExpressionVariable("e.X"));
			if (RefalBase.Match(expression, pattern49))
			{
				return PassiveExpression.Build(Prout(PassiveExpression.Build(Put(PassiveExpression.Build(2, pattern49.GetVariable("e.X"))))));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

	}
}


using System;
using System.Collections;

namespace Refal.Runtime
{
	public class Program : RefalBase
	{
		static void Main()
		{
			Pair(new PassiveExpression());
		}

		public static PassiveExpression Pair(PassiveExpression expression)
		{
			Pattern pattern1 = new Pattern(new ExpressionVariable("e.X"));
			if (RefalBase.Match(expression, pattern1))
			{
				return PassiveExpression.Build(Pair1(PassiveExpression.Build(new OpeningBrace(), new OpeningBrace(), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), pattern1.GetVariable("e.X"), new ClosingBrace())));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Pair1(PassiveExpression expression)
		{
			Pattern pattern2 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.L"), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), "(".ToCharArray(), new ExpressionVariable("e.2"), new ClosingBrace(), new ExpressionVariable("e.R"));
			if (RefalBase.Match(expression, pattern2))
			{
				return PassiveExpression.Build(Pair1(PassiveExpression.Build(new OpeningBrace(), pattern2.GetVariable("e.L"), new OpeningBrace(), pattern2.GetVariable("e.1"), new ClosingBrace(), new OpeningBrace(), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), pattern2.GetVariable("e.2"), new ClosingBrace(), pattern2.GetVariable("e.R"))));
			};

			Pattern pattern3 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.L"), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new OpeningBrace(), new ExpressionVariable("e.2"), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), ")".ToCharArray(), new ExpressionVariable("e.3"), new ClosingBrace(), new ExpressionVariable("e.R"));
			if (RefalBase.Match(expression, pattern3))
			{
				return PassiveExpression.Build(Pair1(PassiveExpression.Build(new OpeningBrace(), pattern3.GetVariable("e.L"), new OpeningBrace(), pattern3.GetVariable("e.1"), new OpeningBrace(), pattern3.GetVariable("e.2"), new ClosingBrace(), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), pattern3.GetVariable("e.3"), new ClosingBrace(), pattern3.GetVariable("e.R"))));
			};

			Pattern pattern4 = new Pattern(new OpeningBrace(), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), ")".ToCharArray(), new ExpressionVariable("e.3"), new ClosingBrace(), new ExpressionVariable("e.R"));
			if (RefalBase.Match(expression, pattern4))
			{
				return PassiveExpression.Build(Prout(PassiveExpression.Build("*** ERROR: Unbalanced ")"".ToCharArray(), "found by Pair:".ToCharArray())), Prout(PassiveExpression.Build("*** ".ToCharArray(), pattern4.GetVariable("e.1"), ")".ToCharArray())));
			};

			Pattern pattern5 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.L"), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), new SymbolVariable("s.2"), new ExpressionVariable("e.3"), new ClosingBrace(), new ExpressionVariable("e.R"));
			if (RefalBase.Match(expression, pattern5))
			{
				return PassiveExpression.Build(Pair1(PassiveExpression.Build(new OpeningBrace(), pattern5.GetVariable("e.L"), new OpeningBrace(), pattern5.GetVariable("e.1"), pattern5.GetVariable("s.2"), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), pattern5.GetVariable("e.3"), new ClosingBrace(), pattern5.GetVariable("e.R"))));
			};

			Pattern pattern6 = new Pattern(new OpeningBrace(), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), new ClosingBrace());
			if (RefalBase.Match(expression, pattern6))
			{
				return PassiveExpression.Build(pattern6.GetVariable("e.1"));
			};

			Pattern pattern7 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.L"), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new ClosingBrace(), new OpeningBrace(), new ClosingBrace());
			if (RefalBase.Match(expression, pattern7))
			{
				return PassiveExpression.Build(Prout(PassiveExpression.Build("*** ERROR: Unbalanced "(" ".ToCharArray(), "found by Pair:".ToCharArray())), Prlmb(PassiveExpression.Build(pattern7.GetVariable("e.L"))));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		public static PassiveExpression PairArg(PassiveExpression expression)
		{
			Pattern pattern8 = new Pattern(new SymbolVariable("s.numb"));
			if (RefalBase.Match(expression, pattern8))
			{
				return PassiveExpression.Build(Pair(PassiveExpression.Build(Arg(PassiveExpression.Build(pattern8.GetVariable("s.numb"))))));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Prlmb(PassiveExpression expression)
		{
			Pattern pattern9 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern9))
			{
				return PassiveExpression.Build(Prout(PassiveExpression.Build("*** ".ToCharArray(), pattern9.GetVariable("e.1"), "(".ToCharArray())), Prlmb(PassiveExpression.Build(pattern9.GetVariable("e.2"))));
			};

			Pattern pattern10 = new Pattern();
			if (RefalBase.Match(expression, pattern10))
			{
				return PassiveExpression.Build();
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		public static PassiveExpression Input(PassiveExpression expression)
		{
			Pattern pattern11 = new Pattern();
			if (RefalBase.Match(expression, pattern11))
			{
				return PassiveExpression.Build(Input1(PassiveExpression.Build(0)));
			};

			Pattern pattern12 = new Pattern(new SymbolVariable("s.C"));
			if (RefalBase.Match(expression, pattern12))
			{
				return PassiveExpression.Build(Input1(PassiveExpression.Build(pattern12.GetVariable("s.C"))));
			};

			Pattern pattern13 = new Pattern(new ExpressionVariable("e.File"));
			if (RefalBase.Match(expression, pattern13))
			{
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Status(PassiveExpression expression)
		{
			Pattern pattern14 = new Pattern(new SymbolVariable("s.M"), new ExpressionVariable("e.File"));
			if (RefalBase.Match(expression, pattern14))
			{
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression F-table(PassiveExpression expression)
		{
			Pattern pattern15 = new Pattern();
			if (RefalBase.Match(expression, pattern15))
			{
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Input1(PassiveExpression expression)
		{
			Pattern pattern16 = new Pattern(new SymbolVariable("s.C"));
			if (RefalBase.Match(expression, pattern16))
			{
				return PassiveExpression.Build(Parse(PassiveExpression.Build(new OpeningBrace(), "$".ToCharArray(), new ClosingBrace(), Read-in(PassiveExpression.Build(pattern16.GetVariable("s.C"), Get(PassiveExpression.Build(pattern16.GetVariable("s.C"))))))));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Read-in(PassiveExpression expression)
		{
			Pattern pattern17 = new Pattern(new SymbolVariable("s.C"));
			if (RefalBase.Match(expression, pattern17))
			{
				return PassiveExpression.Build();
			};

			Pattern pattern18 = new Pattern(new SymbolVariable("s.C"), 0);
			if (RefalBase.Match(expression, pattern18))
			{
				return PassiveExpression.Build();
			};

			Pattern pattern19 = new Pattern(new SymbolVariable("s.C"), new ExpressionVariable("e.1"));
			if (RefalBase.Match(expression, pattern19))
			{
				return PassiveExpression.Build(" ".ToCharArray(), pattern19.GetVariable("e.1"), Read-in(PassiveExpression.Build(pattern19.GetVariable("s.C"), Get(PassiveExpression.Build(pattern19.GetVariable("s.C"))))));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		public static PassiveExpression InputArg(PassiveExpression expression)
		{
			Pattern pattern20 = new Pattern(new SymbolVariable("s.numb"));
			if (RefalBase.Match(expression, pattern20))
			{
				return PassiveExpression.Build(Parse(PassiveExpression.Build(new OpeningBrace(), "$".ToCharArray(), new ClosingBrace(), Arg(PassiveExpression.Build(pattern20.GetVariable("s.numb"))))));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Parse(PassiveExpression expression)
		{
			Pattern pattern21 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), " ".ToCharArray(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern21))
			{
				return PassiveExpression.Build(Parse(PassiveExpression.Build(new OpeningBrace(), pattern21.GetVariable("e.1"), new ClosingBrace(), pattern21.GetVariable("e.2"))));
			};

			Pattern pattern22 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), "\t".ToCharArray(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern22))
			{
				return PassiveExpression.Build(Parse(PassiveExpression.Build(new OpeningBrace(), pattern22.GetVariable("e.1"), new ClosingBrace(), pattern22.GetVariable("e.2"))));
			};

			Pattern pattern23 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), "(".ToCharArray(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern23))
			{
				return PassiveExpression.Build(Parse(PassiveExpression.Build(new OpeningBrace(), new OpeningBrace(), pattern23.GetVariable("e.1"), new ClosingBrace(), new ClosingBrace(), pattern23.GetVariable("e.2"))));
			};

			Pattern pattern24 = new Pattern(new OpeningBrace(), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new ExpressionVariable("e.2"), new ClosingBrace(), ")".ToCharArray(), new ExpressionVariable("e.3"));
			if (RefalBase.Match(expression, pattern24))
			{
				return PassiveExpression.Build(Parse(PassiveExpression.Build(new OpeningBrace(), pattern24.GetVariable("e.1"), new OpeningBrace(), pattern24.GetVariable("e.2"), new ClosingBrace(), new ClosingBrace(), pattern24.GetVariable("e.3"))));
			};

			Pattern pattern25 = new Pattern(new OpeningBrace(), "$".ToCharArray(), new ExpressionVariable("e.1"), new ClosingBrace(), ")".ToCharArray(), new ExpressionVariable("e.3"));
			if (RefalBase.Match(expression, pattern25))
			{
				return PassiveExpression.Build(Prout(PassiveExpression.Build()), Prout(PassiveExpression.Build()), Prout(PassiveExpression.Build("*** ERROR: Unbalanced \')\' in input".ToCharArray())), Prout(PassiveExpression.Build(pattern25.GetVariable("e.1"), ")".ToCharArray())));
			};

			Pattern pattern26 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), "\'".ToCharArray(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern26))
			{
				return PassiveExpression.Build(Quotes(PassiveExpression.Build("Parse", "\'".ToCharArray(), new OpeningBrace(), pattern26.GetVariable("e.1"), new ClosingBrace(), pattern26.GetVariable("e.2"))));
			};

			Pattern pattern27 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), "\"".ToCharArray(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern27))
			{
				return PassiveExpression.Build(Quotes(PassiveExpression.Build("Parse", "\"".ToCharArray(), new OpeningBrace(), new OpeningBrace(), pattern27.GetVariable("e.1"), new ClosingBrace(), new ClosingBrace(), pattern27.GetVariable("e.2"))));
			};

			Pattern pattern28 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), "\\".ToCharArray(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern28))
			{
			};

			Pattern pattern29 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new SymbolVariable("s.A"), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern29))
			{
				return PassiveExpression.Build(Parse1(PassiveExpression.Build(new OpeningBrace(), pattern29.GetVariable("e.1"), new ClosingBrace(), new OpeningBrace(), Type(PassiveExpression.Build(pattern29.GetVariable("s.A"))), new ClosingBrace(), pattern29.GetVariable("s.A"), pattern29.GetVariable("e.2"))));
			};

			Pattern pattern30 = new Pattern(new OpeningBrace(), "$".ToCharArray(), new ExpressionVariable("e.1"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern30))
			{
				return PassiveExpression.Build(pattern30.GetVariable("e.1"));
			};

			Pattern pattern31 = new Pattern(new OpeningBrace(), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new ExpressionVariable("e.2"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern31))
			{
				return PassiveExpression.Build(Prout(PassiveExpression.Build()), Prout(PassiveExpression.Build()), Prout(PassiveExpression.Build("*** ERROR: Unbalanced \'(\' in input".ToCharArray())), Prout-lm(PassiveExpression.Build(new OpeningBrace(), pattern31.GetVariable("e.1"), new ClosingBrace(), pattern31.GetVariable("e.2"))));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Prout-lm(PassiveExpression expression)
		{
			Pattern pattern32 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern32))
			{
				return PassiveExpression.Build(Prout-lm(PassiveExpression.Build(pattern32.GetVariable("e.1"))), Prout(PassiveExpression.Build("*** (".ToCharArray(), pattern32.GetVariable("e.2"))));
			};

			Pattern pattern33 = new Pattern("$".ToCharArray(), new ExpressionVariable("e.1"));
			if (RefalBase.Match(expression, pattern33))
			{
				return PassiveExpression.Build(Prout(PassiveExpression.Build("*** ".ToCharArray(), pattern33.GetVariable("e.1"))));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Escape(PassiveExpression expression)
		{
			Pattern pattern34 = new Pattern("\\".ToCharArray());
			if (RefalBase.Match(expression, pattern34))
			{
				return PassiveExpression.Build("\\".ToCharArray());
			};

			Pattern pattern35 = new Pattern("n".ToCharArray());
			if (RefalBase.Match(expression, pattern35))
			{
				return PassiveExpression.Build("\n".ToCharArray());
			};

			Pattern pattern36 = new Pattern("r".ToCharArray());
			if (RefalBase.Match(expression, pattern36))
			{
				return PassiveExpression.Build("\r".ToCharArray());
			};

			Pattern pattern37 = new Pattern("t".ToCharArray());
			if (RefalBase.Match(expression, pattern37))
			{
				return PassiveExpression.Build("\t".ToCharArray());
			};

			Pattern pattern38 = new Pattern("\'".ToCharArray());
			if (RefalBase.Match(expression, pattern38))
			{
				return PassiveExpression.Build("\'".ToCharArray());
			};

			Pattern pattern39 = new Pattern("\"".ToCharArray());
			if (RefalBase.Match(expression, pattern39))
			{
				return PassiveExpression.Build("\"".ToCharArray());
			};

			Pattern pattern40 = new Pattern("(".ToCharArray());
			if (RefalBase.Match(expression, pattern40))
			{
				return PassiveExpression.Build("\(".ToCharArray());
			};

			Pattern pattern41 = new Pattern(")".ToCharArray());
			if (RefalBase.Match(expression, pattern41))
			{
				return PassiveExpression.Build("\)".ToCharArray());
			};

			Pattern pattern42 = new Pattern("<".ToCharArray());
			if (RefalBase.Match(expression, pattern42))
			{
				return PassiveExpression.Build("\<".ToCharArray());
			};

			Pattern pattern43 = new Pattern(">".ToCharArray());
			if (RefalBase.Match(expression, pattern43))
			{
				return PassiveExpression.Build("\>".ToCharArray());
			};

			Pattern pattern44 = new Pattern(new ExpressionVariable("e.3"));
			if (RefalBase.Match(expression, pattern44))
			{
				return PassiveExpression.Build();
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Quotes(PassiveExpression expression)
		{
			Pattern pattern45 = new Pattern(new SymbolVariable("s.Fun"), new SymbolVariable("s.Q"), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), "\\".ToCharArray(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern45))
			{
			};

			Pattern pattern46 = new Pattern(new SymbolVariable("s.Fun"), "\'".ToCharArray(), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), "\'".ToCharArray(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern46))
			{
				return PassiveExpression.Build(Mu(PassiveExpression.Build(pattern46.GetVariable("s.Fun"), new OpeningBrace(), pattern46.GetVariable("e.1"), new ClosingBrace(), pattern46.GetVariable("e.2"))));
			};

			Pattern pattern47 = new Pattern(new SymbolVariable("s.Fun"), "\"".ToCharArray(), new OpeningBrace(), new OpeningBrace(), new ExpressionVariable("e.0"), new ClosingBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), "\"".ToCharArray(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern47))
			{
				return PassiveExpression.Build(Mu(PassiveExpression.Build(pattern47.GetVariable("s.Fun"), new OpeningBrace(), pattern47.GetVariable("e.0"), Implode_Ext(PassiveExpression.Build(pattern47.GetVariable("e.1"))), new ClosingBrace(), pattern47.GetVariable("e.2"))));
			};

			Pattern pattern48 = new Pattern(new SymbolVariable("s.Fun"), new SymbolVariable("s.Q"), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), "EOF");
			if (RefalBase.Match(expression, pattern48))
			{
				return PassiveExpression.Build(QuotesError(PassiveExpression.Build(pattern48.GetVariable("s.Q"), new OpeningBrace(), pattern48.GetVariable("e.1"), new ClosingBrace())));
			};

			Pattern pattern49 = new Pattern(new SymbolVariable("s.Fun"), new SymbolVariable("s.Q"), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new SymbolVariable("s.A"), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern49))
			{
				return PassiveExpression.Build(Quotes(PassiveExpression.Build(pattern49.GetVariable("s.Fun"), pattern49.GetVariable("s.Q"), new OpeningBrace(), pattern49.GetVariable("e.1"), pattern49.GetVariable("s.A"), new ClosingBrace(), pattern49.GetVariable("e.2"))));
			};

			Pattern pattern50 = new Pattern(new SymbolVariable("s.Fun"), new SymbolVariable("s.Q"), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern50))
			{
				return PassiveExpression.Build(QuotesError(PassiveExpression.Build(pattern50.GetVariable("s.Q"), new OpeningBrace(), pattern50.GetVariable("e.1"), new ClosingBrace())));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression QuotesError(PassiveExpression expression)
		{
			Pattern pattern51 = new Pattern(new SymbolVariable("s.Q"), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern51))
			{
				return PassiveExpression.Build(Prout(PassiveExpression.Build()), "*".ToCharArray(), "Error", Prout(PassiveExpression.Build("*** ERROR: Unbalanced quote in input".ToCharArray())), Prout(PassiveExpression.Build("*** ".ToCharArray(), pattern51.GetVariable("e.1"))), Prout(PassiveExpression.Build("*** ".ToCharArray(), pattern51.GetVariable("s.Q"))));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Hex(PassiveExpression expression)
		{
			Pattern pattern52 = new Pattern(new SymbolVariable("s.d1"), new SymbolVariable("s.d2"));
			if (RefalBase.Match(expression, pattern52))
			{
				return PassiveExpression.Build(Chr(PassiveExpression.Build(Add(PassiveExpression.Build(new OpeningBrace(), Mul(PassiveExpression.Build(pattern52.GetVariable("s.h1"), 16)), new ClosingBrace(), pattern52.GetVariable("s.h2"))))));
			};

			Pattern pattern53 = new Pattern(new SymbolVariable("s.h"));
			if (RefalBase.Match(expression, pattern53))
			{
				return PassiveExpression.Build(pattern53.GetVariable("s.h"));
			};

			Pattern pattern54 = new Pattern("A".ToCharArray());
			if (RefalBase.Match(expression, pattern54))
			{
				return PassiveExpression.Build(10);
			};

			Pattern pattern55 = new Pattern("a".ToCharArray());
			if (RefalBase.Match(expression, pattern55))
			{
				return PassiveExpression.Build(10);
			};

			Pattern pattern56 = new Pattern("B".ToCharArray());
			if (RefalBase.Match(expression, pattern56))
			{
				return PassiveExpression.Build(11);
			};

			Pattern pattern57 = new Pattern("b".ToCharArray());
			if (RefalBase.Match(expression, pattern57))
			{
				return PassiveExpression.Build(11);
			};

			Pattern pattern58 = new Pattern("C".ToCharArray());
			if (RefalBase.Match(expression, pattern58))
			{
				return PassiveExpression.Build(12);
			};

			Pattern pattern59 = new Pattern("c".ToCharArray());
			if (RefalBase.Match(expression, pattern59))
			{
				return PassiveExpression.Build(12);
			};

			Pattern pattern60 = new Pattern("D".ToCharArray());
			if (RefalBase.Match(expression, pattern60))
			{
				return PassiveExpression.Build(13);
			};

			Pattern pattern61 = new Pattern("d".ToCharArray());
			if (RefalBase.Match(expression, pattern61))
			{
				return PassiveExpression.Build(13);
			};

			Pattern pattern62 = new Pattern("E".ToCharArray());
			if (RefalBase.Match(expression, pattern62))
			{
				return PassiveExpression.Build(14);
			};

			Pattern pattern63 = new Pattern("e".ToCharArray());
			if (RefalBase.Match(expression, pattern63))
			{
				return PassiveExpression.Build(14);
			};

			Pattern pattern64 = new Pattern("F".ToCharArray());
			if (RefalBase.Match(expression, pattern64))
			{
				return PassiveExpression.Build(15);
			};

			Pattern pattern65 = new Pattern("f".ToCharArray());
			if (RefalBase.Match(expression, pattern65))
			{
				return PassiveExpression.Build(15);
			};

			Pattern pattern66 = new Pattern(new ExpressionVariable("e.hs"));
			if (RefalBase.Match(expression, pattern66))
			{
				return PassiveExpression.Build();
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Parse1(PassiveExpression expression)
		{
			Pattern pattern67 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new OpeningBrace(), "L".ToCharArray(), new ExpressionVariable("e.A1"), new ClosingBrace(), new SymbolVariable("s.A"), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern67))
			{
				return PassiveExpression.Build(Word(PassiveExpression.Build(new OpeningBrace(), pattern67.GetVariable("e.1"), new ClosingBrace(), new OpeningBrace(), pattern67.GetVariable("s.A"), new ClosingBrace(), pattern67.GetVariable("e.2"))));
			};

			Pattern pattern68 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new OpeningBrace(), "D".ToCharArray(), new ExpressionVariable("e.A1"), new ClosingBrace(), new SymbolVariable("s.A"), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern68))
			{
				return PassiveExpression.Build(Number(PassiveExpression.Build(new OpeningBrace(), pattern68.GetVariable("e.1"), new ClosingBrace(), new OpeningBrace(), pattern68.GetVariable("s.A"), new ClosingBrace(), pattern68.GetVariable("e.2"))));
			};

			Pattern pattern69 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new OpeningBrace(), new SymbolVariable("s.T"), new ExpressionVariable("e.A1"), new ClosingBrace(), new SymbolVariable("s.A"), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern69))
			{
				return PassiveExpression.Build(Parse(PassiveExpression.Build(new OpeningBrace(), pattern69.GetVariable("e.1"), pattern69.GetVariable("s.A"), new ClosingBrace(), pattern69.GetVariable("e.2"))));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Word(PassiveExpression expression)
		{
			Pattern pattern70 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new OpeningBrace(), new ExpressionVariable("e.W"), new ClosingBrace(), new SymbolVariable("s.B"), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern70))
			{
			};

			Pattern pattern71 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new OpeningBrace(), new ExpressionVariable("e.W"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern71))
			{
				return PassiveExpression.Build(Parse(PassiveExpression.Build(new OpeningBrace(), pattern71.GetVariable("e.1"), Implode_Ext(PassiveExpression.Build(pattern71.GetVariable("e.W"))), new ClosingBrace())));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Number(PassiveExpression expression)
		{
			Pattern pattern72 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new OpeningBrace(), new ExpressionVariable("e.N"), new ClosingBrace(), new SymbolVariable("s.X"), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern72))
			{
				return PassiveExpression.Build(Number(PassiveExpression.Build(new OpeningBrace(), pattern72.GetVariable("e.1"), new ClosingBrace(), new OpeningBrace(), pattern72.GetVariable("e.N"), pattern72.GetVariable("s.X"), new ClosingBrace(), pattern72.GetVariable("e.2"))));
			};

			Pattern pattern73 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new OpeningBrace(), new ExpressionVariable("e.N"), new ClosingBrace(), new ExpressionVariable("e.X"));
			if (RefalBase.Match(expression, pattern73))
			{
				return PassiveExpression.Build(Parse(PassiveExpression.Build(new OpeningBrace(), pattern73.GetVariable("e.1"), Numb(PassiveExpression.Build(pattern73.GetVariable("e.N"))), new ClosingBrace(), pattern73.GetVariable("e.X"))));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		public static PassiveExpression Xxout(PassiveExpression expression)
		{
			Pattern pattern74 = new Pattern(new SymbolVariable("s.C"), new ExpressionVariable("e.X"));
			if (RefalBase.Match(expression, pattern74))
			{
				return PassiveExpression.Build(Xxout1(PassiveExpression.Build(pattern74.GetVariable("s.C"), pattern74.GetVariable("e.X"))));
			};

			Pattern pattern75 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.File"), new ClosingBrace(), new ExpressionVariable("e.X"));
			if (RefalBase.Match(expression, pattern75))
			{
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Xxout1(PassiveExpression expression)
		{
			Pattern pattern76 = new Pattern(new SymbolVariable("s.C"), new ExpressionVariable("e.X"));
			if (RefalBase.Match(expression, pattern76))
			{
				return PassiveExpression.Build(Cut-Put(PassiveExpression.Build(pattern76.GetVariable("s.C"), ConS(PassiveExpression.Build(pattern76.GetVariable("e.X"))))));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression ConS(PassiveExpression expression)
		{
			Pattern pattern77 = new Pattern(new SymbolVariable("s.A"), new ExpressionVariable("e.1"));
			if (RefalBase.Match(expression, pattern77))
			{
			};

			Pattern pattern78 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern78))
			{
				return PassiveExpression.Build("(".ToCharArray(), ConS(PassiveExpression.Build(pattern78.GetVariable("e.1"))), ")".ToCharArray(), ConS(PassiveExpression.Build(pattern78.GetVariable("e.2"))));
			};

			Pattern pattern79 = new Pattern();
			if (RefalBase.Match(expression, pattern79))
			{
				return PassiveExpression.Build();
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression WORD(PassiveExpression expression)
		{
			Pattern pattern80 = new Pattern(new ExpressionVariable("e.word"), "Quote");
			if (RefalBase.Match(expression, pattern80))
			{
				return PassiveExpression.Build("\"".ToCharArray(), pattern80.GetVariable("e.word"), "\"".ToCharArray());
			};

			Pattern pattern81 = new Pattern(new ExpressionVariable("e.word"), "NoQuote");
			if (RefalBase.Match(expression, pattern81))
			{
				return PassiveExpression.Build(pattern81.GetVariable("e.word"));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression String(PassiveExpression expression)
		{
			Pattern pattern82 = new Pattern(new OpeningBrace(), new SymbolVariable("s.flag"), new ExpressionVariable("e.Quote"), new ClosingBrace(), "\\".ToCharArray(), new ExpressionVariable("e.1"));
			if (RefalBase.Match(expression, pattern82))
			{
				return PassiveExpression.Build("\\".ToCharArray(), "\\".ToCharArray(), String(PassiveExpression.Build(new OpeningBrace(), pattern82.GetVariable("s.flag"), "Quote", new ClosingBrace(), pattern82.GetVariable("e.1"))));
			};

			Pattern pattern83 = new Pattern(new OpeningBrace(), new SymbolVariable("s.flag"), new ExpressionVariable("e.Quote"), new ClosingBrace(), "\'".ToCharArray(), new ExpressionVariable("e.1"));
			if (RefalBase.Match(expression, pattern83))
			{
				return PassiveExpression.Build("\\".ToCharArray(), "\'".ToCharArray(), String(PassiveExpression.Build(new OpeningBrace(), pattern83.GetVariable("s.flag"), "Quote", new ClosingBrace(), pattern83.GetVariable("e.1"))));
			};

			Pattern pattern84 = new Pattern(new OpeningBrace(), new SymbolVariable("s.flag"), new ExpressionVariable("e.Quote"), new ClosingBrace(), "\"".ToCharArray(), new ExpressionVariable("e.1"));
			if (RefalBase.Match(expression, pattern84))
			{
				return PassiveExpression.Build("\\".ToCharArray(), "\"".ToCharArray(), String(PassiveExpression.Build(new OpeningBrace(), pattern84.GetVariable("s.flag"), "Quote", new ClosingBrace(), pattern84.GetVariable("e.1"))));
			};

			Pattern pattern85 = new Pattern(new OpeningBrace(), new SymbolVariable("s.flag"), new ExpressionVariable("e.Quote"), new ClosingBrace(), "\t".ToCharArray(), new ExpressionVariable("e.1"));
			if (RefalBase.Match(expression, pattern85))
			{
				return PassiveExpression.Build("\\".ToCharArray(), "t".ToCharArray(), String(PassiveExpression.Build(new OpeningBrace(), pattern85.GetVariable("s.flag"), "Quote", new ClosingBrace(), pattern85.GetVariable("e.1"))));
			};

			Pattern pattern86 = new Pattern(new OpeningBrace(), new SymbolVariable("s.flag"), new ExpressionVariable("e.Quote"), new ClosingBrace(), "\n".ToCharArray(), new ExpressionVariable("e.1"));
			if (RefalBase.Match(expression, pattern86))
			{
				return PassiveExpression.Build("\\".ToCharArray(), "n".ToCharArray(), String(PassiveExpression.Build(new OpeningBrace(), pattern86.GetVariable("s.flag"), "Quote", new ClosingBrace(), pattern86.GetVariable("e.1"))));
			};

			Pattern pattern87 = new Pattern(new OpeningBrace(), new SymbolVariable("s.flag"), new ExpressionVariable("e.Quote"), new ClosingBrace(), "\r".ToCharArray(), new ExpressionVariable("e.1"));
			if (RefalBase.Match(expression, pattern87))
			{
				return PassiveExpression.Build("\\".ToCharArray(), "r".ToCharArray(), String(PassiveExpression.Build(new OpeningBrace(), pattern87.GetVariable("s.flag"), "Quote", new ClosingBrace(), pattern87.GetVariable("e.1"))));
			};

			Pattern pattern88 = new Pattern(new TermVariable("t.flag"), new SymbolVariable("s.A"), new ExpressionVariable("e.1"));
			if (RefalBase.Match(expression, pattern88))
			{
			};

			Pattern pattern89 = new Pattern(new TermVariable("t.flag"), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern89))
			{
				return PassiveExpression.Build(String(PassiveExpression.Build(pattern89.GetVariable("t.flag"))), "(".ToCharArray(), ConS(PassiveExpression.Build(pattern89.GetVariable("e.1"))), ")".ToCharArray(), ConS(PassiveExpression.Build(pattern89.GetVariable("e.2"))));
			};

			Pattern pattern90 = new Pattern(new OpeningBrace(), "Word", new SymbolVariable("s.Quote"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern90))
			{
				return PassiveExpression.Build(pattern90.GetVariable("s.Quote"));
			};

			Pattern pattern91 = new Pattern(new OpeningBrace(), "Chars", new ExpressionVariable("e.Quote"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern91))
			{
				return PassiveExpression.Build("\'".ToCharArray());
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression ToHex(PassiveExpression expression)
		{
			Pattern pattern92 = new Pattern(new SymbolVariable("s.digit"));
			if (RefalBase.Match(expression, pattern92))
			{
				return PassiveExpression.Build(ToHexDig(PassiveExpression.Build(pattern92.GetVariable("s.q"))), ToHexDig(PassiveExpression.Build(pattern92.GetVariable("s.r"))));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression ToHexDig(PassiveExpression expression)
		{
			Pattern pattern93 = new Pattern(15);
			if (RefalBase.Match(expression, pattern93))
			{
				return PassiveExpression.Build("F".ToCharArray());
			};

			Pattern pattern94 = new Pattern(14);
			if (RefalBase.Match(expression, pattern94))
			{
				return PassiveExpression.Build("E".ToCharArray());
			};

			Pattern pattern95 = new Pattern(13);
			if (RefalBase.Match(expression, pattern95))
			{
				return PassiveExpression.Build("D".ToCharArray());
			};

			Pattern pattern96 = new Pattern(12);
			if (RefalBase.Match(expression, pattern96))
			{
				return PassiveExpression.Build("C".ToCharArray());
			};

			Pattern pattern97 = new Pattern(11);
			if (RefalBase.Match(expression, pattern97))
			{
				return PassiveExpression.Build("B".ToCharArray());
			};

			Pattern pattern98 = new Pattern(10);
			if (RefalBase.Match(expression, pattern98))
			{
				return PassiveExpression.Build("A".ToCharArray());
			};

			Pattern pattern99 = new Pattern(new SymbolVariable("s.d"));
			if (RefalBase.Match(expression, pattern99))
			{
				return PassiveExpression.Build(Symb(PassiveExpression.Build(pattern99.GetVariable("s.d"))));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Cut-Put(PassiveExpression expression)
		{
			Pattern pattern100 = new Pattern(new SymbolVariable("s.C"));
			if (RefalBase.Match(expression, pattern100))
			{
				return PassiveExpression.Build();
			};

			Pattern pattern101 = new Pattern(new SymbolVariable("s.C"), new ExpressionVariable("e.X"));
			if (RefalBase.Match(expression, pattern101))
			{
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		public static PassiveExpression Xxinr(PassiveExpression expression)
		{
			Pattern pattern102 = new Pattern();
			if (RefalBase.Match(expression, pattern102))
			{
				return PassiveExpression.Build(Xxinr1(PassiveExpression.Build(0)));
			};

			Pattern pattern103 = new Pattern(new SymbolVariable("s.C"));
			if (RefalBase.Match(expression, pattern103))
			{
				return PassiveExpression.Build(Xxinr1(PassiveExpression.Build(pattern103.GetVariable("s.C"))));
			};

			Pattern pattern104 = new Pattern(new ExpressionVariable("e.File"));
			if (RefalBase.Match(expression, pattern104))
			{
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Xxinr1(PassiveExpression expression)
		{
			Pattern pattern105 = new Pattern(new SymbolVariable("s.C"));
			if (RefalBase.Match(expression, pattern105))
			{
				return PassiveExpression.Build(Mescp(PassiveExpression.Build(new OpeningBrace(), "$".ToCharArray(), new ClosingBrace(), Read-all(PassiveExpression.Build(pattern105.GetVariable("s.C"), Get(PassiveExpression.Build(pattern105.GetVariable("s.C"))))))));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Read-all(PassiveExpression expression)
		{
			Pattern pattern106 = new Pattern(new SymbolVariable("s.C"), 0);
			if (RefalBase.Match(expression, pattern106))
			{
				return PassiveExpression.Build("EOF");
			};

			Pattern pattern107 = new Pattern(new SymbolVariable("s.C"), new ExpressionVariable("e.X"));
			if (RefalBase.Match(expression, pattern107))
			{
				return PassiveExpression.Build(pattern107.GetVariable("e.X"), Read-all(PassiveExpression.Build(pattern107.GetVariable("s.C"), Get(PassiveExpression.Build(pattern107.GetVariable("s.C"))))));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Mescp(PassiveExpression expression)
		{
			Pattern pattern108 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), "\'".ToCharArray(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern108))
			{
				return PassiveExpression.Build(Quotes(PassiveExpression.Build("Mescp", "\'".ToCharArray(), new OpeningBrace(), pattern108.GetVariable("e.1"), new ClosingBrace(), pattern108.GetVariable("e.2"))));
			};

			Pattern pattern109 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), "\"".ToCharArray(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern109))
			{
				return PassiveExpression.Build(Quotes(PassiveExpression.Build("Mescp", "\"".ToCharArray(), new OpeningBrace(), new OpeningBrace(), pattern109.GetVariable("e.1"), new ClosingBrace(), new ClosingBrace(), pattern109.GetVariable("e.2"))));
			};

			Pattern pattern110 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), "\\".ToCharArray(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern110))
			{
				return PassiveExpression.Build(Prout(PassiveExpression.Build()), "*".ToCharArray(), "Error", Prout(PassiveExpression.Build("*** ERROR: Unexpected escape sequnce in input".ToCharArray())), Prout(PassiveExpression.Build("*** ".ToCharArray(), pattern110.GetVariable("e.1"))), Prout(PassiveExpression.Build("*** ".ToCharArray(), "\\".ToCharArray(), pattern110.GetVariable("e.2"))));
			};

			Pattern pattern111 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), "(".ToCharArray(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern111))
			{
				return PassiveExpression.Build(Mescp(PassiveExpression.Build(new OpeningBrace(), new OpeningBrace(), pattern111.GetVariable("e.1"), new ClosingBrace(), new ClosingBrace(), pattern111.GetVariable("e.2"))));
			};

			Pattern pattern112 = new Pattern(new OpeningBrace(), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new ExpressionVariable("e.2"), new ClosingBrace(), ")".ToCharArray(), new ExpressionVariable("e.3"));
			if (RefalBase.Match(expression, pattern112))
			{
				return PassiveExpression.Build(Mescp(PassiveExpression.Build(new OpeningBrace(), pattern112.GetVariable("e.1"), new OpeningBrace(), pattern112.GetVariable("e.2"), new ClosingBrace(), new ClosingBrace(), pattern112.GetVariable("e.3"))));
			};

			Pattern pattern113 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), ")".ToCharArray(), new ExpressionVariable("e.3"));
			if (RefalBase.Match(expression, pattern113))
			{
				return PassiveExpression.Build(Prout(PassiveExpression.Build()), Prout(PassiveExpression.Build()), Prout(PassiveExpression.Build("Unbalanced ) in input".ToCharArray())), Prout(PassiveExpression.Build(pattern113.GetVariable("e.1"), " ***)***".ToCharArray())));
			};

			Pattern pattern114 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), "EOF");
			if (RefalBase.Match(expression, pattern114))
			{
				return PassiveExpression.Build(Mescp(PassiveExpression.Build(new OpeningBrace(), pattern114.GetVariable("e.1"), new ClosingBrace())));
			};

			Pattern pattern115 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new SymbolVariable("s.A"), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern115))
			{
				return PassiveExpression.Build(Mescp1(PassiveExpression.Build(new OpeningBrace(), Type(PassiveExpression.Build(pattern115.GetVariable("s.A"))), new ClosingBrace(), new OpeningBrace(), pattern115.GetVariable("e.1"), new ClosingBrace(), new OpeningBrace(), pattern115.GetVariable("s.A"), new ClosingBrace(), pattern115.GetVariable("e.2"))));
			};

			Pattern pattern116 = new Pattern(new OpeningBrace(), "$".ToCharArray(), new ExpressionVariable("e.1"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern116))
			{
				return PassiveExpression.Build(pattern116.GetVariable("e.1"));
			};

			Pattern pattern117 = new Pattern(new OpeningBrace(), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new ExpressionVariable("e.2"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern117))
			{
				return PassiveExpression.Build(Prout(PassiveExpression.Build()), Prout(PassiveExpression.Build()), Prout(PassiveExpression.Build("Unbalanced (... in input".ToCharArray())), Prout(PassiveExpression.Build(pattern117.GetVariable("e.1"), " ***(***".ToCharArray())));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Mescp1(PassiveExpression expression)
		{
			Pattern pattern118 = new Pattern(new OpeningBrace(), "L".ToCharArray(), new ExpressionVariable("e.A1"), new ClosingBrace(), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new OpeningBrace(), new SymbolVariable("s.A"), new ExpressionVariable("e.2"), new ClosingBrace(), " ".ToCharArray(), new ExpressionVariable("e.3"));
			if (RefalBase.Match(expression, pattern118))
			{
				return PassiveExpression.Build(Mescp(PassiveExpression.Build(new OpeningBrace(), pattern118.GetVariable("e.1"), Implode(PassiveExpression.Build(pattern118.GetVariable("s.A"), pattern118.GetVariable("e.2"))), new ClosingBrace(), pattern118.GetVariable("e.3"))));
			};

			Pattern pattern119 = new Pattern(new OpeningBrace(), "L".ToCharArray(), new ExpressionVariable("e.A1"), new ClosingBrace(), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new OpeningBrace(), new SymbolVariable("s.A"), new ExpressionVariable("e.2"), new ClosingBrace(), "EOF");
			if (RefalBase.Match(expression, pattern119))
			{
				return PassiveExpression.Build(Mescp(PassiveExpression.Build(new OpeningBrace(), pattern119.GetVariable("e.1"), Implode(PassiveExpression.Build(pattern119.GetVariable("s.A"), pattern119.GetVariable("e.2"))), new ClosingBrace())));
			};

			Pattern pattern120 = new Pattern(new OpeningBrace(), "D".ToCharArray(), new ExpressionVariable("e.A1"), new ClosingBrace(), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new OpeningBrace(), new SymbolVariable("s.A"), new ExpressionVariable("e.2"), new ClosingBrace(), " ".ToCharArray(), new ExpressionVariable("e.3"));
			if (RefalBase.Match(expression, pattern120))
			{
				return PassiveExpression.Build(Mescp(PassiveExpression.Build(new OpeningBrace(), pattern120.GetVariable("e.1"), Numb(PassiveExpression.Build(pattern120.GetVariable("s.A"), pattern120.GetVariable("e.2"))), new ClosingBrace(), pattern120.GetVariable("e.3"))));
			};

			Pattern pattern121 = new Pattern(new OpeningBrace(), "D".ToCharArray(), new ExpressionVariable("e.A1"), new ClosingBrace(), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new OpeningBrace(), new SymbolVariable("s.A"), new ExpressionVariable("e.2"), new ClosingBrace(), "EOF");
			if (RefalBase.Match(expression, pattern121))
			{
				return PassiveExpression.Build(Mescp(PassiveExpression.Build(new OpeningBrace(), pattern121.GetVariable("e.1"), Numb(PassiveExpression.Build(pattern121.GetVariable("s.A"), pattern121.GetVariable("e.2"))), new ClosingBrace())));
			};

			Pattern pattern122 = new Pattern(new OpeningBrace(), new SymbolVariable("s.T"), new ExpressionVariable("e.A1"), new ClosingBrace(), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new OpeningBrace(), new SymbolVariable("s.A"), new ExpressionVariable("e.2"), new ClosingBrace(), new SymbolVariable("s.X"), new ExpressionVariable("e.3"));
			if (RefalBase.Match(expression, pattern122))
			{
				return PassiveExpression.Build(Mescp1(PassiveExpression.Build(new OpeningBrace(), pattern122.GetVariable("s.T"), pattern122.GetVariable("e.A1"), new ClosingBrace(), new OpeningBrace(), pattern122.GetVariable("e.1"), new ClosingBrace(), new OpeningBrace(), pattern122.GetVariable("s.A"), pattern122.GetVariable("e.2"), pattern122.GetVariable("s.X"), new ClosingBrace(), pattern122.GetVariable("e.3"))));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

	}
}


using System;
using System.Collections;

namespace Refal.Runtime
{
	public class Program : RefalBase
	{
		static void Main()
		{
			Go(new PassiveExpression());
		}

		public static PassiveExpression Go(PassiveExpression expression)
		{
			Pattern pattern1 = new Pattern();
			if (RefalBase.Match(expression, pattern1))
			{
				return PassiveExpression.Build(Introduction(PassiveExpression.Build()), Loop(PassiveExpression.Build()));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Introduction(PassiveExpression expression)
		{
			Pattern pattern2 = new Pattern();
			if (RefalBase.Match(expression, pattern2))
			{
				return PassiveExpression.Build(Prout(PassiveExpression.Build("This is a program to translate an arithmetic expression".ToCharArray())), Prout(PassiveExpression.Build("into a code for a one-address computer. Primary operands".ToCharArray())), Prout(PassiveExpression.Build("are identifiers and whole numbers. Operations are:".ToCharArray())), Prout(PassiveExpression.Build("+, -, *, /, ^with usual priorities. Parentheses as usual.".ToCharArray())), Prout(PassiveExpression.Build("Example: Joe^2*5/(SUM + 318)".ToCharArray())), Prout(PassiveExpression.Build()));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Invitation(PassiveExpression expression)
		{
			Pattern pattern3 = new Pattern();
			if (RefalBase.Match(expression, pattern3))
			{
				return PassiveExpression.Build(Prout(PassiveExpression.Build()), Prout(PassiveExpression.Build()), Prout(PassiveExpression.Build("Type in an expression (one line), or Ctrl-Z to terminate".ToCharArray())));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Loop(PassiveExpression expression)
		{
			Pattern pattern4 = new Pattern();
			if (RefalBase.Match(expression, pattern4))
			{
				return PassiveExpression.Build(Nil(PassiveExpression.Build(Dgall(PassiveExpression.Build()))), Invitation(PassiveExpression.Build()), Inout(PassiveExpression.Build(Card(PassiveExpression.Build()))));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Nil(PassiveExpression expression)
		{
			Pattern pattern5 = new Pattern(new ExpressionVariable("e.X"));
			if (RefalBase.Match(expression, pattern5))
			{
				return PassiveExpression.Build();
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Inout(PassiveExpression expression)
		{
			Pattern pattern6 = new Pattern(0);
			if (RefalBase.Match(expression, pattern6))
			{
				return PassiveExpression.Build(Prout(PassiveExpression.Build("End of session".ToCharArray())));
			};

			Pattern pattern7 = new Pattern(new ExpressionVariable("e.X"));
			if (RefalBase.Match(expression, pattern7))
			{
				return PassiveExpression.Build(Out(PassiveExpression.Build(Translate(PassiveExpression.Build(Lex(PassiveExpression.Build(new OpeningBrace(), "$".ToCharArray(), new ClosingBrace(), pattern7.GetVariable("e.X"))))))));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Out(PassiveExpression expression)
		{
			Pattern pattern8 = new Pattern();
			if (RefalBase.Match(expression, pattern8))
			{
				return PassiveExpression.Build(Loop(PassiveExpression.Build()));
			};

			Pattern pattern9 = new Pattern(new ExpressionVariable("e.1"));
			if (RefalBase.Match(expression, pattern9))
			{
				return PassiveExpression.Build(Prout(PassiveExpression.Build("The translation is:".ToCharArray())), Write(PassiveExpression.Build(pattern9.GetVariable("e.1"))), Loop(PassiveExpression.Build()));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Lex(PassiveExpression expression)
		{
			Pattern pattern10 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), "(".ToCharArray(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern10))
			{
				return PassiveExpression.Build(Lex(PassiveExpression.Build(new OpeningBrace(), new OpeningBrace(), pattern10.GetVariable("e.1"), new ClosingBrace(), new ClosingBrace(), pattern10.GetVariable("e.2"))));
			};

			Pattern pattern11 = new Pattern(new OpeningBrace(), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new ExpressionVariable("e.2"), new ClosingBrace(), ")".ToCharArray(), new ExpressionVariable("e.3"));
			if (RefalBase.Match(expression, pattern11))
			{
				return PassiveExpression.Build(Lex(PassiveExpression.Build(new OpeningBrace(), pattern11.GetVariable("e.1"), new OpeningBrace(), pattern11.GetVariable("e.2"), new ClosingBrace(), new ClosingBrace(), pattern11.GetVariable("e.3"))));
			};

			Pattern pattern12 = new Pattern(new OpeningBrace(), "$".ToCharArray(), new ExpressionVariable("e.1"), new ClosingBrace(), ")".ToCharArray(), new ExpressionVariable("e.3"));
			if (RefalBase.Match(expression, pattern12))
			{
				return PassiveExpression.Build(Prout(PassiveExpression.Build("ERROR: Unpaired right parenthsis:".ToCharArray())), Prout(PassiveExpression.Build(pattern12.GetVariable("e.1"), ")".ToCharArray())));
			};

			Pattern pattern13 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), " ".ToCharArray(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern13))
			{
				return PassiveExpression.Build(Lex(PassiveExpression.Build(new OpeningBrace(), pattern13.GetVariable("e.1"), new ClosingBrace(), pattern13.GetVariable("e.2"))));
			};

			Pattern pattern14 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), "\t".ToCharArray(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern14))
			{
				return PassiveExpression.Build(Lex(PassiveExpression.Build(new OpeningBrace(), pattern14.GetVariable("e.1"), new ClosingBrace(), pattern14.GetVariable("e.2"))));
			};

			Pattern pattern15 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), "\'".ToCharArray(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern15))
			{
			};

			Pattern pattern16 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new SymbolVariable("s.A"), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern16))
			{
			};

			Pattern pattern17 = new Pattern(new OpeningBrace(), "$".ToCharArray(), new ExpressionVariable("e.1"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern17))
			{
				return PassiveExpression.Build(pattern17.GetVariable("e.1"));
			};

			Pattern pattern18 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.M"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern18))
			{
				return PassiveExpression.Build(Prout(PassiveExpression.Build("ERROR: Unpaired left parentheses".ToCharArray())), Pr-lmb(PassiveExpression.Build(pattern18.GetVariable("e.M"))));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Quotes(PassiveExpression expression)
		{
			Pattern pattern19 = new Pattern(new SymbolVariable("s.Q"), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new ExpressionVariable("e.0"), "\\".ToCharArray(), "\\".ToCharArray(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern19))
			{
				return PassiveExpression.Build(Quotes(PassiveExpression.Build(pattern19.GetVariable("s.Q"), new OpeningBrace(), pattern19.GetVariable("e.1"), pattern19.GetVariable("e.0"), "\\".ToCharArray(), "\\".ToCharArray(), new ClosingBrace(), pattern19.GetVariable("e.2"))));
			};

			Pattern pattern20 = new Pattern(new SymbolVariable("s.Q"), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new ExpressionVariable("e.0"), "\\".ToCharArray(), new SymbolVariable("s.Q"), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern20))
			{
				return PassiveExpression.Build(Quotes(PassiveExpression.Build(pattern20.GetVariable("s.Q"), new OpeningBrace(), pattern20.GetVariable("e.1"), pattern20.GetVariable("e.0"), "\\".ToCharArray(), pattern20.GetVariable("s.Q"), new ClosingBrace(), pattern20.GetVariable("e.2"))));
			};

			Pattern pattern21 = new Pattern(new SymbolVariable("s.Q"), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new ExpressionVariable("e.0"), new SymbolVariable("s.Q"), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern21))
			{
				return PassiveExpression.Build(new OpeningBrace(), pattern21.GetVariable("e.1"), pattern21.GetVariable("e.0"), new ClosingBrace(), pattern21.GetVariable("e.2"));
			};

			Pattern pattern22 = new Pattern(new SymbolVariable("s.Q"), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern22))
			{
				return PassiveExpression.Build(new OpeningBrace(), new ClosingBrace(), pattern22.GetVariable("e.1"), pattern22.GetVariable("e.2"));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Id-tail(PassiveExpression expression)
		{
			Pattern pattern23 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new SymbolVariable("s.A"), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern23))
			{
			};

			Pattern pattern24 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern24))
			{
				return PassiveExpression.Build(new OpeningBrace(), pattern24.GetVariable("e.1"), new ClosingBrace());
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression D-string(PassiveExpression expression)
		{
			Pattern pattern25 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new SymbolVariable("s.A"), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern25))
			{
				return PassiveExpression.Build(D-string(PassiveExpression.Build(new OpeningBrace(), pattern25.GetVariable("e.1"), pattern25.GetVariable("s.A"), new ClosingBrace(), pattern25.GetVariable("e.2"))));
			};

			Pattern pattern26 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern26))
			{
				return PassiveExpression.Build(new OpeningBrace(), pattern26.GetVariable("e.1"), new ClosingBrace(), pattern26.GetVariable("e.2"));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Pr-lmb(PassiveExpression expression)
		{
			Pattern pattern27 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern27))
			{
				return PassiveExpression.Build(Pr-lmb(PassiveExpression.Build(pattern27.GetVariable("e.1"))), Prout(PassiveExpression.Build("(".ToCharArray(), pattern27.GetVariable("e.2"))));
			};

			Pattern pattern28 = new Pattern("$".ToCharArray(), new ExpressionVariable("e.1"));
			if (RefalBase.Match(expression, pattern28))
			{
				return PassiveExpression.Build();
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Translate(PassiveExpression expression)
		{
			Pattern pattern29 = new Pattern();
			if (RefalBase.Match(expression, pattern29))
			{
				return PassiveExpression.Build();
			};

			Pattern pattern30 = new Pattern(new ExpressionVariable("e.1"));
			if (RefalBase.Match(expression, pattern30))
			{
				return PassiveExpression.Build(Code-gen(PassiveExpression.Build(new OpeningBrace(), 1, new ClosingBrace(), Parse(PassiveExpression.Build(pattern30.GetVariable("e.1"))), Dg(PassiveExpression.Build("compl".ToCharArray())))));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Last1(PassiveExpression expression)
		{
			Pattern pattern31 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.A"), new SymbolVariable("s.X"), new ExpressionVariable("e.B"), new ClosingBrace(), new ExpressionVariable("e.1"), new SymbolVariable("s.X"), new OpeningBrace(), new ExpressionVariable("e.2"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern31))
			{
				return PassiveExpression.Build(pattern31.GetVariable("e.1"), pattern31.GetVariable("s.X"), new OpeningBrace(), pattern31.GetVariable("e.2"), new ClosingBrace());
			};

			Pattern pattern32 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.A"), new ClosingBrace(), new ExpressionVariable("e.1"), new TermVariable("t.X"), new OpeningBrace(), new ExpressionVariable("e.2"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern32))
			{
				return PassiveExpression.Build(Last1(PassiveExpression.Build(new OpeningBrace(), pattern32.GetVariable("e.A"), new ClosingBrace(), pattern32.GetVariable("e.1"), new OpeningBrace(), pattern32.GetVariable("t.X"), pattern32.GetVariable("e.2"), new ClosingBrace())));
			};

			Pattern pattern33 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.A"), new ClosingBrace(), new OpeningBrace(), new ExpressionVariable("e.2"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern33))
			{
				return PassiveExpression.Build(new OpeningBrace(), pattern33.GetVariable("e.2"), new ClosingBrace());
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Parse(PassiveExpression expression)
		{
			Pattern pattern34 = new Pattern(new ExpressionVariable("e.Exp"));
			if (RefalBase.Match(expression, pattern34))
			{
				return PassiveExpression.Build(pattern34.GetVariable("s.Op"), new OpeningBrace(), Parse(PassiveExpression.Build(pattern34.GetVariable("e.1"))), new ClosingBrace(), Parse(PassiveExpression.Build(pattern34.GetVariable("e.2"))));
			};

			Pattern pattern35 = new Pattern(new ExpressionVariable("e.Exp"));
			if (RefalBase.Match(expression, pattern35))
			{
				return PassiveExpression.Build(pattern35.GetVariable("s.Op"), new OpeningBrace(), Parse(PassiveExpression.Build(pattern35.GetVariable("e.1"))), new ClosingBrace(), Parse(PassiveExpression.Build(pattern35.GetVariable("e.2"))));
			};

			Pattern pattern36 = new Pattern(new ExpressionVariable("e.1"), "^".ToCharArray(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern36))
			{
				return PassiveExpression.Build("^".ToCharArray(), new OpeningBrace(), Parse(PassiveExpression.Build(pattern36.GetVariable("e.1"))), new ClosingBrace(), Parse(PassiveExpression.Build(pattern36.GetVariable("e.2"))));
			};

			Pattern pattern37 = new Pattern(new SymbolVariable("s.Symb"));
			if (RefalBase.Match(expression, pattern37))
			{
				return PassiveExpression.Build(pattern37.GetVariable("s.Symb"));
			};

			Pattern pattern38 = new Pattern(new SymbolVariable("s.Symb"));
			if (RefalBase.Match(expression, pattern38))
			{
				return PassiveExpression.Build(pattern38.GetVariable("s.Symb"));
			};

			Pattern pattern39 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.Exp"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern39))
			{
				return PassiveExpression.Build(Parse(PassiveExpression.Build(pattern39.GetVariable("e.Exp"))));
			};

			Pattern pattern40 = new Pattern();
			if (RefalBase.Match(expression, pattern40))
			{
				return PassiveExpression.Build();
			};

			Pattern pattern41 = new Pattern(new ExpressionVariable("e.Exp"));
			if (RefalBase.Match(expression, pattern41))
			{
				return PassiveExpression.Build(Prout(PassiveExpression.Build("Syntax error. Cannot parse ".ToCharArray(), pattern41.GetVariable("e.Exp"))), Br(PassiveExpression.Build("compl=fail".ToCharArray())));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Code-gen(PassiveExpression expression)
		{
			Pattern pattern42 = new Pattern(new ExpressionVariable("e.1"), "fail".ToCharArray());
			if (RefalBase.Match(expression, pattern42))
			{
				return PassiveExpression.Build();
			};

			Pattern pattern43 = new Pattern(new OpeningBrace(), new SymbolVariable("s.N"), new ClosingBrace(), "-".ToCharArray(), new OpeningBrace(), new ClosingBrace(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern43))
			{
				return PassiveExpression.Build(Code-gen(PassiveExpression.Build(new OpeningBrace(), pattern43.GetVariable("s.N"), new ClosingBrace(), pattern43.GetVariable("e.2"))), "Minus ;".ToCharArray());
			};

			Pattern pattern44 = new Pattern(new OpeningBrace(), new SymbolVariable("s.N"), new ClosingBrace(), new SymbolVariable("s.Op"), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new SymbolVariable("s.2"));
			if (RefalBase.Match(expression, pattern44))
			{
				return PassiveExpression.Build(Code-gen(PassiveExpression.Build(new OpeningBrace(), pattern44.GetVariable("s.N"), new ClosingBrace(), pattern44.GetVariable("e.1"))), Code-op(PassiveExpression.Build(pattern44.GetVariable("s.Op"))), Outform(PassiveExpression.Build(pattern44.GetVariable("s.2"))), ";".ToCharArray());
			};

			Pattern pattern45 = new Pattern(new OpeningBrace(), new SymbolVariable("s.N"), new ClosingBrace(), "+".ToCharArray(), new OpeningBrace(), new SymbolVariable("s.1"), new ClosingBrace(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern45))
			{
				return PassiveExpression.Build(Code-gen(PassiveExpression.Build(new OpeningBrace(), pattern45.GetVariable("s.N"), new ClosingBrace(), pattern45.GetVariable("e.2"))), Code-op(PassiveExpression.Build("+".ToCharArray())), Outform(PassiveExpression.Build(pattern45.GetVariable("s.1"))), ";".ToCharArray());
			};

			Pattern pattern46 = new Pattern(new OpeningBrace(), new SymbolVariable("s.N"), new ClosingBrace(), "*".ToCharArray(), new OpeningBrace(), new SymbolVariable("s.1"), new ClosingBrace(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern46))
			{
				return PassiveExpression.Build(Code-gen(PassiveExpression.Build(new OpeningBrace(), pattern46.GetVariable("s.N"), new ClosingBrace(), pattern46.GetVariable("e.2"))), Code-op(PassiveExpression.Build("*".ToCharArray())), Outform(PassiveExpression.Build(pattern46.GetVariable("s.1"))), ";".ToCharArray());
			};

			Pattern pattern47 = new Pattern(new OpeningBrace(), new SymbolVariable("s.N"), new ClosingBrace(), new SymbolVariable("s.Op"), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern47))
			{
				return PassiveExpression.Build(Code-gen(PassiveExpression.Build(new OpeningBrace(), pattern47.GetVariable("s.N"), new ClosingBrace(), pattern47.GetVariable("e.2"))), "STORE R+".ToCharArray(), Symb(PassiveExpression.Build(pattern47.GetVariable("s.N"))), ";".ToCharArray(), Code-gen(PassiveExpression.Build(new OpeningBrace(), Add(PassiveExpression.Build(new OpeningBrace(), pattern47.GetVariable("s.N"), new ClosingBrace(), 1)), new ClosingBrace(), pattern47.GetVariable("e.1"))), Code-op(PassiveExpression.Build(pattern47.GetVariable("s.Op"))), "R+".ToCharArray(), Symb(PassiveExpression.Build(pattern47.GetVariable("s.N"))), ";".ToCharArray());
			};

			Pattern pattern48 = new Pattern(new OpeningBrace(), new SymbolVariable("s.N"), new ClosingBrace(), new SymbolVariable("s.Symb"));
			if (RefalBase.Match(expression, pattern48))
			{
				return PassiveExpression.Build("LOAD ".ToCharArray(), Outform(PassiveExpression.Build(pattern48.GetVariable("s.Symb"))), ";".ToCharArray());
			};

			Pattern pattern49 = new Pattern(new OpeningBrace(), new SymbolVariable("s.N"), new ClosingBrace(), new ExpressionVariable("e.X"));
			if (RefalBase.Match(expression, pattern49))
			{
				return PassiveExpression.Build(new OpeningBrace(), "Syntax error".ToCharArray(), new ClosingBrace(), ";".ToCharArray());
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Outform(PassiveExpression expression)
		{
			Pattern pattern50 = new Pattern(new SymbolVariable("s.S"));
			if (RefalBase.Match(expression, pattern50))
			{
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Code-op(PassiveExpression expression)
		{
			Pattern pattern51 = new Pattern("+".ToCharArray());
			if (RefalBase.Match(expression, pattern51))
			{
				return PassiveExpression.Build("ADD ".ToCharArray());
			};

			Pattern pattern52 = new Pattern("-".ToCharArray());
			if (RefalBase.Match(expression, pattern52))
			{
				return PassiveExpression.Build("SUB ".ToCharArray());
			};

			Pattern pattern53 = new Pattern("*".ToCharArray());
			if (RefalBase.Match(expression, pattern53))
			{
				return PassiveExpression.Build("MUL ".ToCharArray());
			};

			Pattern pattern54 = new Pattern("/".ToCharArray());
			if (RefalBase.Match(expression, pattern54))
			{
				return PassiveExpression.Build("DIV ".ToCharArray());
			};

			Pattern pattern55 = new Pattern("^".ToCharArray());
			if (RefalBase.Match(expression, pattern55))
			{
				return PassiveExpression.Build("POW ".ToCharArray());
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Write(PassiveExpression expression)
		{
			Pattern pattern56 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), ";".ToCharArray(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern56))
			{
				return PassiveExpression.Build(Prout(PassiveExpression.Build(pattern56.GetVariable("e.1"))));
			};

			Pattern pattern57 = new Pattern(new ExpressionVariable("e.1"), ";".ToCharArray(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern57))
			{
				return PassiveExpression.Build(Prout(PassiveExpression.Build("      ".ToCharArray(), pattern57.GetVariable("e.1"))), Write(PassiveExpression.Build(pattern57.GetVariable("e.2"))));
			};

			Pattern pattern58 = new Pattern();
			if (RefalBase.Match(expression, pattern58))
			{
				return PassiveExpression.Build();
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

	}
}


using System;
using System.Collections;

namespace Refal.Runtime
{
	public class Program : RefalBase
	{
		static void Main()
		{
			Go(new PassiveExpression());
		}

		public static PassiveExpression Go(PassiveExpression expression)
		{
			Pattern pattern1 = new Pattern();
			if (RefalBase.Match(expression, pattern1))
			{
				return PassiveExpression.Build(Job(PassiveExpression.Build()));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Job(PassiveExpression expression)
		{
			Pattern pattern2 = new Pattern();
			if (RefalBase.Match(expression, pattern2))
			{
				return PassiveExpression.Build(Prout(PassiveExpression.Build("Type expression to evaluate. To end: empty line. ".ToCharArray())), Prout(PassiveExpression.Build("To end session: empty expression".ToCharArray())), Prout(PassiveExpression.Build()), Check-end(PassiveExpression.Build(Inp-met(PassiveExpression.Build()))));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Check-end(PassiveExpression expression)
		{
			Pattern pattern3 = new Pattern();
			if (RefalBase.Match(expression, pattern3))
			{
				return PassiveExpression.Build(Prout(PassiveExpression.Build("End of session".ToCharArray())));
			};

			Pattern pattern4 = new Pattern("*".ToCharArray(), "Error");
			if (RefalBase.Match(expression, pattern4))
			{
				return PassiveExpression.Build(Job(PassiveExpression.Build()));
			};

			Pattern pattern5 = new Pattern(new ExpressionVariable("e.X"));
			if (RefalBase.Match(expression, pattern5))
			{
				return PassiveExpression.Build(Out(PassiveExpression.Build(UpD(PassiveExpression.Build(pattern5.GetVariable("e.X"))))));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Out(PassiveExpression expression)
		{
			Pattern pattern6 = new Pattern(new ExpressionVariable("e.X"));
			if (RefalBase.Match(expression, pattern6))
			{
				return PassiveExpression.Build(Prout(PassiveExpression.Build("The result is:".ToCharArray())), Prout(PassiveExpression.Build(pattern6.GetVariable("e.X"))), Prout(PassiveExpression.Build()), Job(PassiveExpression.Build()));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}



		private static PassiveExpression Inp-met(PassiveExpression expression)
		{
			Pattern pattern7 = new Pattern();
			if (RefalBase.Match(expression, pattern7))
			{
				return PassiveExpression.Build(Parse(PassiveExpression.Build(new OpeningBrace(), "$".ToCharArray(), new ClosingBrace(), Read-in(PassiveExpression.Build(Card(PassiveExpression.Build()))))));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Read-in(PassiveExpression expression)
		{
			Pattern pattern8 = new Pattern();
			if (RefalBase.Match(expression, pattern8))
			{
				return PassiveExpression.Build();
			};

			Pattern pattern9 = new Pattern(0);
			if (RefalBase.Match(expression, pattern9))
			{
				return PassiveExpression.Build();
			};

			Pattern pattern10 = new Pattern(new ExpressionVariable("e.1"));
			if (RefalBase.Match(expression, pattern10))
			{
				return PassiveExpression.Build(" ".ToCharArray(), pattern10.GetVariable("e.1"), Read-in(PassiveExpression.Build(Card(PassiveExpression.Build()))));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Parse(PassiveExpression expression)
		{
			Pattern pattern11 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), " ".ToCharArray(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern11))
			{
				return PassiveExpression.Build(Parse(PassiveExpression.Build(new OpeningBrace(), pattern11.GetVariable("e.1"), new ClosingBrace(), pattern11.GetVariable("e.2"))));
			};

			Pattern pattern12 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), "\t".ToCharArray(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern12))
			{
				return PassiveExpression.Build(Parse(PassiveExpression.Build(new OpeningBrace(), pattern12.GetVariable("e.1"), new ClosingBrace(), pattern12.GetVariable("e.2"))));
			};

			Pattern pattern13 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), "(".ToCharArray(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern13))
			{
				return PassiveExpression.Build(Parse(PassiveExpression.Build(new OpeningBrace(), new OpeningBrace(), pattern13.GetVariable("e.1"), new ClosingBrace(), new ClosingBrace(), pattern13.GetVariable("e.2"))));
			};

			Pattern pattern14 = new Pattern(new OpeningBrace(), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new ExpressionVariable("e.2"), new ClosingBrace(), ")".ToCharArray(), new ExpressionVariable("e.3"));
			if (RefalBase.Match(expression, pattern14))
			{
				return PassiveExpression.Build(Parse(PassiveExpression.Build(new OpeningBrace(), pattern14.GetVariable("e.1"), new OpeningBrace(), pattern14.GetVariable("e.2"), new ClosingBrace(), new ClosingBrace(), pattern14.GetVariable("e.3"))));
			};

			Pattern pattern15 = new Pattern(new OpeningBrace(), "$".ToCharArray(), new ExpressionVariable("e.1"), new ClosingBrace(), ")".ToCharArray(), new ExpressionVariable("e.3"));
			if (RefalBase.Match(expression, pattern15))
			{
				return PassiveExpression.Build(Prout(PassiveExpression.Build()), "*".ToCharArray(), "Error", Prout(PassiveExpression.Build("*** ERROR: Unbalanced \')\' in input".ToCharArray())), Prout(PassiveExpression.Build(pattern15.GetVariable("e.1"), ")".ToCharArray())));
			};

			Pattern pattern16 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), "<".ToCharArray(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern16))
			{
				return PassiveExpression.Build(Parse(PassiveExpression.Build(new OpeningBrace(), new OpeningBrace(), pattern16.GetVariable("e.1"), "*".ToCharArray(), new ClosingBrace(), new ClosingBrace(), pattern16.GetVariable("e.2"))));
			};

			Pattern pattern17 = new Pattern(new OpeningBrace(), new OpeningBrace(), new ExpressionVariable("e.1"), "*".ToCharArray(), new ClosingBrace(), new SymbolVariable("s.F"), new ExpressionVariable("e.2"), new ClosingBrace(), ">".ToCharArray(), new ExpressionVariable("e.3"));
			if (RefalBase.Match(expression, pattern17))
			{
			};

			Pattern pattern18 = new Pattern(new OpeningBrace(), new OpeningBrace(), new ExpressionVariable("e.1"), "*".ToCharArray(), new ClosingBrace(), new ExpressionVariable("e.2"), new ClosingBrace(), ">".ToCharArray(), new ExpressionVariable("e.3"));
			if (RefalBase.Match(expression, pattern18))
			{
				return PassiveExpression.Build(Prout(PassiveExpression.Build()), "*".ToCharArray(), "Error", Prout(PassiveExpression.Build("*** ERROR: No function name in input".ToCharArray())), Prout(PassiveExpression.Build(pattern18.GetVariable("e.1"), "*(?????".ToCharArray())));
			};

			Pattern pattern19 = new Pattern(new OpeningBrace(), "$".ToCharArray(), new ExpressionVariable("e.1"), new ClosingBrace(), ">".ToCharArray(), new ExpressionVariable("e.3"));
			if (RefalBase.Match(expression, pattern19))
			{
				return PassiveExpression.Build(Prout(PassiveExpression.Build()), "*".ToCharArray(), "Error", Prout(PassiveExpression.Build("*** ERROR: Unbalanced \'>\' in input".ToCharArray())), Prout(PassiveExpression.Build(pattern19.GetVariable("e.1"), ">".ToCharArray())));
			};

			Pattern pattern20 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), "*".ToCharArray(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern20))
			{
				return PassiveExpression.Build(Parse(PassiveExpression.Build(new OpeningBrace(), pattern20.GetVariable("e.1"), "*V".ToCharArray(), new ClosingBrace(), pattern20.GetVariable("e.2"))));
			};

			Pattern pattern21 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), "\'".ToCharArray(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern21))
			{
				return PassiveExpression.Build(Quotes(PassiveExpression.Build("Parse", "\'".ToCharArray(), new OpeningBrace(), pattern21.GetVariable("e.1"), new ClosingBrace(), pattern21.GetVariable("e.2"))));
			};

			Pattern pattern22 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), "\"".ToCharArray(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern22))
			{
				return PassiveExpression.Build(Quotes(PassiveExpression.Build("Parse", "\"".ToCharArray(), new OpeningBrace(), new OpeningBrace(), pattern22.GetVariable("e.1"), new ClosingBrace(), new ClosingBrace(), pattern22.GetVariable("e.2"))));
			};

			Pattern pattern23 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), "\\".ToCharArray(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern23))
			{
			};

			Pattern pattern24 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new SymbolVariable("s.A"), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern24))
			{
				return PassiveExpression.Build(Parse1(PassiveExpression.Build(new OpeningBrace(), pattern24.GetVariable("e.1"), new ClosingBrace(), new OpeningBrace(), Type(PassiveExpression.Build(pattern24.GetVariable("s.A"))), new ClosingBrace(), pattern24.GetVariable("s.A"), pattern24.GetVariable("e.2"))));
			};

			Pattern pattern25 = new Pattern(new OpeningBrace(), "$".ToCharArray(), new ExpressionVariable("e.1"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern25))
			{
				return PassiveExpression.Build(pattern25.GetVariable("e.1"));
			};

			Pattern pattern26 = new Pattern(new OpeningBrace(), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new ExpressionVariable("e.2"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern26))
			{
				return PassiveExpression.Build(Prout(PassiveExpression.Build()), "*".ToCharArray(), "Error", Prout(PassiveExpression.Build("*** ERROR: Unbalanced \'(\' or \'<\' in input".ToCharArray())), Prout-lm(PassiveExpression.Build(new OpeningBrace(), pattern26.GetVariable("e.1"), new ClosingBrace(), pattern26.GetVariable("e.2"))));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Checkf(PassiveExpression expression)
		{
			Pattern pattern27 = new Pattern("+".ToCharArray());
			if (RefalBase.Match(expression, pattern27))
			{
				return PassiveExpression.Build("Add");
			};

			Pattern pattern28 = new Pattern("-".ToCharArray());
			if (RefalBase.Match(expression, pattern28))
			{
				return PassiveExpression.Build("Sub");
			};

			Pattern pattern29 = new Pattern("*".ToCharArray());
			if (RefalBase.Match(expression, pattern29))
			{
				return PassiveExpression.Build("Mul");
			};

			Pattern pattern30 = new Pattern("/".ToCharArray());
			if (RefalBase.Match(expression, pattern30))
			{
				return PassiveExpression.Build("Div");
			};

			Pattern pattern31 = new Pattern(new SymbolVariable("s.F"));
			if (RefalBase.Match(expression, pattern31))
			{
				return PassiveExpression.Build(pattern31.GetVariable("s.F"));
			};

			Pattern pattern32 = new Pattern(new SymbolVariable("s.F"));
			if (RefalBase.Match(expression, pattern32))
			{
				return PassiveExpression.Build();
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Prout-lm(PassiveExpression expression)
		{
			Pattern pattern33 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), "*".ToCharArray(), new ClosingBrace(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern33))
			{
				return PassiveExpression.Build(Prout-lm(PassiveExpression.Build(pattern33.GetVariable("e.1"))), Prout(PassiveExpression.Build("*** *(".ToCharArray(), pattern33.GetVariable("e.2"))));
			};

			Pattern pattern34 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern34))
			{
				return PassiveExpression.Build(Prout-lm(PassiveExpression.Build(pattern34.GetVariable("e.1"))), Prout(PassiveExpression.Build("*** (".ToCharArray(), pattern34.GetVariable("e.2"))));
			};

			Pattern pattern35 = new Pattern("$".ToCharArray(), new ExpressionVariable("e.1"));
			if (RefalBase.Match(expression, pattern35))
			{
				return PassiveExpression.Build(Prout(PassiveExpression.Build("*** ".ToCharArray(), pattern35.GetVariable("e.1"))));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Escape(PassiveExpression expression)
		{
			Pattern pattern36 = new Pattern("\\".ToCharArray());
			if (RefalBase.Match(expression, pattern36))
			{
				return PassiveExpression.Build("\\".ToCharArray());
			};

			Pattern pattern37 = new Pattern("n".ToCharArray());
			if (RefalBase.Match(expression, pattern37))
			{
				return PassiveExpression.Build("\n".ToCharArray());
			};

			Pattern pattern38 = new Pattern("r".ToCharArray());
			if (RefalBase.Match(expression, pattern38))
			{
				return PassiveExpression.Build("\r".ToCharArray());
			};

			Pattern pattern39 = new Pattern("t".ToCharArray());
			if (RefalBase.Match(expression, pattern39))
			{
				return PassiveExpression.Build("\t".ToCharArray());
			};

			Pattern pattern40 = new Pattern("\'".ToCharArray());
			if (RefalBase.Match(expression, pattern40))
			{
				return PassiveExpression.Build("\'".ToCharArray());
			};

			Pattern pattern41 = new Pattern("\"".ToCharArray());
			if (RefalBase.Match(expression, pattern41))
			{
				return PassiveExpression.Build("\"".ToCharArray());
			};

			Pattern pattern42 = new Pattern("(".ToCharArray());
			if (RefalBase.Match(expression, pattern42))
			{
				return PassiveExpression.Build("\(".ToCharArray());
			};

			Pattern pattern43 = new Pattern(")".ToCharArray());
			if (RefalBase.Match(expression, pattern43))
			{
				return PassiveExpression.Build("\)".ToCharArray());
			};

			Pattern pattern44 = new Pattern("<".ToCharArray());
			if (RefalBase.Match(expression, pattern44))
			{
				return PassiveExpression.Build("\<".ToCharArray());
			};

			Pattern pattern45 = new Pattern(">".ToCharArray());
			if (RefalBase.Match(expression, pattern45))
			{
				return PassiveExpression.Build("\>".ToCharArray());
			};

			Pattern pattern46 = new Pattern(new ExpressionVariable("e.3"));
			if (RefalBase.Match(expression, pattern46))
			{
				return PassiveExpression.Build();
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Quotes(PassiveExpression expression)
		{
			Pattern pattern47 = new Pattern(new SymbolVariable("s.Fun"), new SymbolVariable("s.Q"), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), "\\".ToCharArray(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern47))
			{
			};

			Pattern pattern48 = new Pattern(new SymbolVariable("s.Fun"), "\'".ToCharArray(), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), "\'".ToCharArray(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern48))
			{
				return PassiveExpression.Build(Mu(PassiveExpression.Build(pattern48.GetVariable("s.Fun"), new OpeningBrace(), pattern48.GetVariable("e.1"), new ClosingBrace(), pattern48.GetVariable("e.2"))));
			};

			Pattern pattern49 = new Pattern(new SymbolVariable("s.Fun"), "\"".ToCharArray(), new OpeningBrace(), new OpeningBrace(), new ExpressionVariable("e.0"), new ClosingBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), "\"".ToCharArray(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern49))
			{
				return PassiveExpression.Build(Mu(PassiveExpression.Build(pattern49.GetVariable("s.Fun"), new OpeningBrace(), pattern49.GetVariable("e.0"), Implode_Ext(PassiveExpression.Build(pattern49.GetVariable("e.1"))), new ClosingBrace(), pattern49.GetVariable("e.2"))));
			};

			Pattern pattern50 = new Pattern(new SymbolVariable("s.Fun"), new SymbolVariable("s.Q"), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), "EOF");
			if (RefalBase.Match(expression, pattern50))
			{
				return PassiveExpression.Build(QuotesError(PassiveExpression.Build(pattern50.GetVariable("s.Q"), new OpeningBrace(), pattern50.GetVariable("e.1"), new ClosingBrace())));
			};

			Pattern pattern51 = new Pattern(new SymbolVariable("s.Fun"), "\'".ToCharArray(), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), "*".ToCharArray(), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern51))
			{
				return PassiveExpression.Build(Quotes(PassiveExpression.Build(pattern51.GetVariable("s.Fun"), "\'".ToCharArray(), new OpeningBrace(), pattern51.GetVariable("e.1"), "*V".ToCharArray(), new ClosingBrace(), pattern51.GetVariable("e.2"))));
			};

			Pattern pattern52 = new Pattern(new SymbolVariable("s.Fun"), new SymbolVariable("s.Q"), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new SymbolVariable("s.A"), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern52))
			{
				return PassiveExpression.Build(Quotes(PassiveExpression.Build(pattern52.GetVariable("s.Fun"), pattern52.GetVariable("s.Q"), new OpeningBrace(), pattern52.GetVariable("e.1"), pattern52.GetVariable("s.A"), new ClosingBrace(), pattern52.GetVariable("e.2"))));
			};

			Pattern pattern53 = new Pattern(new SymbolVariable("s.Fun"), new SymbolVariable("s.Q"), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern53))
			{
				return PassiveExpression.Build(QuotesError(PassiveExpression.Build(pattern53.GetVariable("s.Q"), new OpeningBrace(), pattern53.GetVariable("e.1"), new ClosingBrace())));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression QuotesError(PassiveExpression expression)
		{
			Pattern pattern54 = new Pattern(new SymbolVariable("s.Q"), new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern54))
			{
				return PassiveExpression.Build(Prout(PassiveExpression.Build()), "*".ToCharArray(), "Error", Prout(PassiveExpression.Build("*** ERROR: Unbalanced quote in input".ToCharArray())), Prout(PassiveExpression.Build("*** ".ToCharArray(), pattern54.GetVariable("e.1"))), Prout(PassiveExpression.Build("*** ".ToCharArray(), pattern54.GetVariable("s.Q"))));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Hex(PassiveExpression expression)
		{
			Pattern pattern55 = new Pattern(new SymbolVariable("s.d1"), new SymbolVariable("s.d2"));
			if (RefalBase.Match(expression, pattern55))
			{
				return PassiveExpression.Build(Chr(PassiveExpression.Build(Add(PassiveExpression.Build(new OpeningBrace(), Mul(PassiveExpression.Build(pattern55.GetVariable("s.h1"), 16)), new ClosingBrace(), pattern55.GetVariable("s.h2"))))));
			};

			Pattern pattern56 = new Pattern(new SymbolVariable("s.h"));
			if (RefalBase.Match(expression, pattern56))
			{
				return PassiveExpression.Build(pattern56.GetVariable("s.h"));
			};

			Pattern pattern57 = new Pattern("A".ToCharArray());
			if (RefalBase.Match(expression, pattern57))
			{
				return PassiveExpression.Build(10);
			};

			Pattern pattern58 = new Pattern("a".ToCharArray());
			if (RefalBase.Match(expression, pattern58))
			{
				return PassiveExpression.Build(10);
			};

			Pattern pattern59 = new Pattern("B".ToCharArray());
			if (RefalBase.Match(expression, pattern59))
			{
				return PassiveExpression.Build(11);
			};

			Pattern pattern60 = new Pattern("b".ToCharArray());
			if (RefalBase.Match(expression, pattern60))
			{
				return PassiveExpression.Build(11);
			};

			Pattern pattern61 = new Pattern("C".ToCharArray());
			if (RefalBase.Match(expression, pattern61))
			{
				return PassiveExpression.Build(12);
			};

			Pattern pattern62 = new Pattern("c".ToCharArray());
			if (RefalBase.Match(expression, pattern62))
			{
				return PassiveExpression.Build(12);
			};

			Pattern pattern63 = new Pattern("D".ToCharArray());
			if (RefalBase.Match(expression, pattern63))
			{
				return PassiveExpression.Build(13);
			};

			Pattern pattern64 = new Pattern("d".ToCharArray());
			if (RefalBase.Match(expression, pattern64))
			{
				return PassiveExpression.Build(13);
			};

			Pattern pattern65 = new Pattern("E".ToCharArray());
			if (RefalBase.Match(expression, pattern65))
			{
				return PassiveExpression.Build(14);
			};

			Pattern pattern66 = new Pattern("e".ToCharArray());
			if (RefalBase.Match(expression, pattern66))
			{
				return PassiveExpression.Build(14);
			};

			Pattern pattern67 = new Pattern("F".ToCharArray());
			if (RefalBase.Match(expression, pattern67))
			{
				return PassiveExpression.Build(15);
			};

			Pattern pattern68 = new Pattern("f".ToCharArray());
			if (RefalBase.Match(expression, pattern68))
			{
				return PassiveExpression.Build(15);
			};

			Pattern pattern69 = new Pattern(new ExpressionVariable("e.hs"));
			if (RefalBase.Match(expression, pattern69))
			{
				return PassiveExpression.Build();
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Parse1(PassiveExpression expression)
		{
			Pattern pattern70 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new OpeningBrace(), "L".ToCharArray(), new ExpressionVariable("e.A1"), new ClosingBrace(), new SymbolVariable("s.A"), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern70))
			{
				return PassiveExpression.Build(Word(PassiveExpression.Build(new OpeningBrace(), pattern70.GetVariable("e.1"), new ClosingBrace(), new OpeningBrace(), pattern70.GetVariable("s.A"), new ClosingBrace(), pattern70.GetVariable("e.2"))));
			};

			Pattern pattern71 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new OpeningBrace(), "D".ToCharArray(), new ExpressionVariable("e.A1"), new ClosingBrace(), new SymbolVariable("s.A"), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern71))
			{
				return PassiveExpression.Build(Number(PassiveExpression.Build(new OpeningBrace(), pattern71.GetVariable("e.1"), new ClosingBrace(), new OpeningBrace(), pattern71.GetVariable("s.A"), new ClosingBrace(), pattern71.GetVariable("e.2"))));
			};

			Pattern pattern72 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new OpeningBrace(), new SymbolVariable("s.T"), new ExpressionVariable("e.A1"), new ClosingBrace(), new SymbolVariable("s.A"), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern72))
			{
				return PassiveExpression.Build(Parse(PassiveExpression.Build(new OpeningBrace(), pattern72.GetVariable("e.1"), pattern72.GetVariable("s.A"), new ClosingBrace(), pattern72.GetVariable("e.2"))));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Word(PassiveExpression expression)
		{
			Pattern pattern73 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new OpeningBrace(), new ExpressionVariable("e.W"), new ClosingBrace(), new SymbolVariable("s.B"), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern73))
			{
			};

			Pattern pattern74 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new OpeningBrace(), new ExpressionVariable("e.W"), new ClosingBrace());
			if (RefalBase.Match(expression, pattern74))
			{
				return PassiveExpression.Build(Parse(PassiveExpression.Build(new OpeningBrace(), pattern74.GetVariable("e.1"), Implode_Ext(PassiveExpression.Build(pattern74.GetVariable("e.W"))), new ClosingBrace())));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

		private static PassiveExpression Number(PassiveExpression expression)
		{
			Pattern pattern75 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new OpeningBrace(), new ExpressionVariable("e.N"), new ClosingBrace(), new SymbolVariable("s.X"), new ExpressionVariable("e.2"));
			if (RefalBase.Match(expression, pattern75))
			{
				return PassiveExpression.Build(Number(PassiveExpression.Build(new OpeningBrace(), pattern75.GetVariable("e.1"), new ClosingBrace(), new OpeningBrace(), pattern75.GetVariable("e.N"), pattern75.GetVariable("s.X"), new ClosingBrace(), pattern75.GetVariable("e.2"))));
			};

			Pattern pattern76 = new Pattern(new OpeningBrace(), new ExpressionVariable("e.1"), new ClosingBrace(), new OpeningBrace(), new ExpressionVariable("e.N"), new ClosingBrace(), new ExpressionVariable("e.X"));
			if (RefalBase.Match(expression, pattern76))
			{
				return PassiveExpression.Build(Parse(PassiveExpression.Build(new OpeningBrace(), pattern76.GetVariable("e.1"), Numb(PassiveExpression.Build(pattern76.GetVariable("e.N"))), new ClosingBrace(), pattern76.GetVariable("e.X"))));
			};

			throw new RecognitionImpossibleException("Recognition impossible");
		}

	}
}

-- line 21 col 1: No entry point defined

-- line 11 col 1: No entry point defined

This section should contain errors: 
---------------------------------------- 
*** Duplicate definition of Test1 
-- line 8 col 8: Duplicate definition of function Test1
